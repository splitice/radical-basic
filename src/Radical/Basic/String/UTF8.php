<?php
namespace Radical\Basic\String;

/**
 * Provides string functions for UTF-8 strings
 *
 * This class is implemented to provide a UTF-8 version of almost every built-in
 * PHP string function. For more information about UTF-8, please visit
 * http://flourishlib.com/docs/UTF-8.
 * 
 * @copyright  Copyright (c) 2008-2011 Will Bond
 * @author     Will Bond [wb] <will@flourishlib.com>
 * @license    http://flourishlib.com/license
 *
 * @package    Flourish
 * @link       http://flourishlib.com/fUTF8
 * 
 * @version    1.0.0b15
 */
class UTF8 
{
	// The following constants allow for nice looking callbacks to static methods
	const ascii    = 'fUTF8::ascii';
	const chr      = 'fUTF8::chr';
	const clean    = 'fUTF8::clean';
	const cmp      = 'fUTF8::cmp';
	const explode  = 'fUTF8::explode';
	const icmp     = 'fUTF8::icmp';
	const inatcmp  = 'fUTF8::inatcmp';
	const ipos     = 'fUTF8::ipos';
	const ireplace = 'fUTF8::ireplace';
	const irpos    = 'fUTF8::irpos';
	const istr     = 'fUTF8::istr';
	const len      = 'fUTF8::len';
	const lower    = 'fUTF8::lower';
	const ltrim    = 'fUTF8::ltrim';
	const natcmp   = 'fUTF8::natcmp';
	const ord      = 'fUTF8::ord';
	const pad      = 'fUTF8::pad';
	const pos      = 'fUTF8::pos';
	const replace  = 'fUTF8::replace';
	const reset    = 'fUTF8::reset';
	const rev      = 'fUTF8::rev';
	const rpos     = 'fUTF8::rpos';
	const rtrim    = 'fUTF8::rtrim';
	const str      = 'fUTF8::str';
	const sub      = 'fUTF8::sub';
	const trim     = 'fUTF8::trim';
	const ucfirst  = 'fUTF8::ucfirst';
	const ucwords  = 'fUTF8::ucwords';
	const upper    = 'fUTF8::upper';
	const wordwrap = 'fUTF8::wordwrap';


	/**
	 * Depending how things are compiled, NetBSD and Solaris don't support //IGNORE in iconv()
	 *
	 * If //IGNORE support is not provided strings with invalid characters will be truncated
	 *
	 * @var boolean
	 */
	static private $can_ignore_invalid = NULL;

	/**
	 * All lowercase UTF-8 characters mapped to uppercase characters
	 *
	 * @var array
	 */
	static private $lower_to_upper = array(
		'a' => 'A', 'b' => 'B', 'c' => 'C', 'd' => 'D', 'e' => 'E', 'f' => 'F',
		'g' => 'G', 'h' => 'H', 'i' => 'I', 'j' => 'J', 'k' => 'K', 'l' => 'L',
		'm' => 'M', 'n' => 'N', 'o' => 'O', 'p' => 'P', 'q' => 'Q', 'r' => 'R',
		's' => 'S', 't' => 'T', 'u' => 'U', 'v' => 'V', 'w' => 'W', 'x' => 'X',
		'y' => 'Y', 'z' => 'Z', 'ÃƒÂ ' => 'Ãƒâ‚¬', 'ÃƒÂ¡' => 'Ãƒï¿½', 'ÃƒÂ¢' => 'Ãƒâ€š', 'ÃƒÂ£' => 'ÃƒÆ’',
		'ÃƒÂ¤' => 'Ãƒâ€ž', 'ÃƒÂ¥' => 'Ãƒâ€¦', 'ÃƒÂ¦' => 'Ãƒâ€ ', 'ÃƒÂ§' => 'Ãƒâ€¡', 'ÃƒÂ¨' => 'ÃƒË†', 'ÃƒÂ©' => 'Ãƒâ€°',
		'ÃƒÂª' => 'ÃƒÅ ', 'ÃƒÂ«' => 'Ãƒâ€¹', 'ÃƒÂ¬' => 'ÃƒÅ’', 'ÃƒÂ­' => 'Ãƒï¿½', 'ÃƒÂ®' => 'ÃƒÅ½', 'ÃƒÂ¯' => 'Ãƒï¿½',
		'ÃƒÂ°' => 'Ãƒï¿½', 'ÃƒÂ±' => 'Ãƒâ€˜', 'ÃƒÂ²' => 'Ãƒâ€™', 'ÃƒÂ³' => 'Ãƒâ€œ', 'ÃƒÂ´' => 'Ãƒâ€�', 'ÃƒÂµ' => 'Ãƒâ€¢',
		'ÃƒÂ¶' => 'Ãƒâ€“', 'ÃƒÂ¸' => 'ÃƒËœ', 'ÃƒÂ¹' => 'Ãƒâ„¢', 'ÃƒÂº' => 'ÃƒÅ¡', 'ÃƒÂ»' => 'Ãƒâ€º', 'ÃƒÂ¼' => 'ÃƒÅ“',
		'ÃƒÂ½' => 'Ãƒï¿½', 'ÃƒÂ¾' => 'ÃƒÅ¾', 'Ã„ï¿½' => 'Ã„â‚¬', 'Ã„Æ’' => 'Ã„â€š', 'Ã„â€¦' => 'Ã„â€ž', 'Ã„â€¡' => 'Ã„â€ ',
		'Ã„â€°' => 'Ã„Ë†', 'Ã„â€¹' => 'Ã„Å ', 'Ã„ï¿½' => 'Ã„Å’', 'Ã„ï¿½' => 'Ã„Å½', 'Ã„â€˜' => 'Ã„ï¿½', 'Ã„â€œ' => 'Ã„â€™',
		'Ã„â€¢' => 'Ã„â€�', 'Ã„â€”' => 'Ã„â€“', 'Ã„â„¢' => 'Ã„Ëœ', 'Ã„â€º' => 'Ã„Å¡', 'Ã„ï¿½' => 'Ã„Å“', 'Ã„Å¸' => 'Ã„Å¾',
		'Ã„Â¡' => 'Ã„Â ', 'Ã„Â£' => 'Ã„Â¢', 'Ã„Â¥' => 'Ã„Â¤', 'Ã„Â§' => 'Ã„Â¦', 'Ã„Â©' => 'Ã„Â¨', 'Ã„Â«' => 'Ã„Âª',
		'Ã„Â­' => 'Ã„Â¬', 'Ã„Â¯' => 'Ã„Â®', 'Ã„Â³' => 'Ã„Â²', 'Ã„Âµ' => 'Ã„Â´', 'Ã„Â·' => 'Ã„Â¶', 'Ã„Âº' => 'Ã„Â¹',
		'Ã„Â¼' => 'Ã„Â»', 'Ã„Â¾' => 'Ã„Â½', 'Ã…â‚¬' => 'Ã„Â¿', 'Ã…â€š' => 'Ã…ï¿½', 'Ã…â€ž' => 'Ã…Æ’', 'Ã…â€ ' => 'Ã…â€¦',
		'Ã…Ë†' => 'Ã…â€¡', 'Ã…â€¹' => 'Ã…Å ', 'Ã…ï¿½' => 'Ã…Å’', 'Ã…ï¿½' => 'Ã…Å½', 'Ã…â€˜' => 'Ã…ï¿½', 'Ã…â€œ' => 'Ã…â€™',
		'Ã…â€¢' => 'Ã…â€�', 'Ã…â€”' => 'Ã…â€“', 'Ã…â„¢' => 'Ã…Ëœ', 'Ã…â€º' => 'Ã…Å¡', 'Ã…ï¿½' => 'Ã…Å“', 'Ã…Å¸' => 'Ã…Å¾',
		'Ã…Â¡' => 'Ã…Â ', 'Ã…Â£' => 'Ã…Â¢', 'Ã…Â¥' => 'Ã…Â¤', 'Ã…Â§' => 'Ã…Â¦', 'Ã…Â©' => 'Ã…Â¨', 'Ã…Â«' => 'Ã…Âª',
		'Ã…Â­' => 'Ã…Â¬', 'Ã…Â¯' => 'Ã…Â®', 'Ã…Â±' => 'Ã…Â°', 'Ã…Â³' => 'Ã…Â²', 'Ã…Âµ' => 'Ã…Â´', 'Ã…Â·' => 'Ã…Â¶',
		'ÃƒÂ¿' => 'Ã…Â¸', 'Ã…Âº' => 'Ã…Â¹', 'Ã…Â¼' => 'Ã…Â»', 'Ã…Â¾' => 'Ã…Â½', 'Ã‰â€œ' => 'Ã†ï¿½', 'Ã†Æ’' => 'Ã†â€š',
		'Ã†â€¦' => 'Ã†â€ž', 'Ã‰â€�' => 'Ã†â€ ', 'Ã†Ë†' => 'Ã†â€¡', 'Ã‰â€”' => 'Ã†Å ', 'Ã†Å’' => 'Ã†â€¹', 'Ã‰Ëœ' => 'Ã†Å½',
		'Ã‰â„¢' => 'Ã†ï¿½', 'Ã‰â€º' => 'Ã†ï¿½', 'Ã†â€™' => 'Ã†â€˜', 'Ã‰Â ' => 'Ã†â€œ', 'Ã‰Â£' => 'Ã†â€�', 'Ã‰Â©' => 'Ã†â€“',
		'Ã‰Â¨' => 'Ã†â€”', 'Ã†â„¢' => 'Ã†Ëœ', 'Ã‰Â¯' => 'Ã†Å“', 'Ã‰Â²' => 'Ã†ï¿½', 'Ã‰Âµ' => 'Ã†Å¸', 'Ã†Â¡' => 'Ã†Â ',
		'Ã†Â£' => 'Ã†Â¢', 'Ã†Â¥' => 'Ã†Â¤', 'Ã†Â¨' => 'Ã†Â§', 'ÃŠÆ’' => 'Ã†Â©', 'Ã†Â­' => 'Ã†Â¬', 'ÃŠË†' => 'Ã†Â®',
		'Ã†Â°' => 'Ã†Â¯', 'ÃŠÅ ' => 'Ã†Â±', 'ÃŠâ€¹' => 'Ã†Â²', 'Ã†Â´' => 'Ã†Â³', 'Ã†Â¶' => 'Ã†Âµ', 'ÃŠâ€™' => 'Ã†Â·',
		'Ã†Â¹' => 'Ã†Â¸', 'Ã†Â½' => 'Ã†Â¼', 'Ã‡â€ ' => 'Ã‡â€ž', 'Ã‡â€ ' => 'Ã‡â€¦', 'Ã‡â€°' => 'Ã‡â€¡', 'Ã‡â€°' => 'Ã‡Ë†',
		'Ã‡Å’' => 'Ã‡Å ', 'Ã‡Å’' => 'Ã‡â€¹', 'Ã‡Å½' => 'Ã‡ï¿½', 'Ã‡ï¿½' => 'Ã‡ï¿½', 'Ã‡â€™' => 'Ã‡â€˜', 'Ã‡â€�' => 'Ã‡â€œ',
		'Ã‡â€“' => 'Ã‡â€¢', 'Ã‡Ëœ' => 'Ã‡â€”', 'Ã‡Å¡' => 'Ã‡â„¢', 'Ã‡Å“' => 'Ã‡â€º', 'Ã‡Å¸' => 'Ã‡Å¾', 'Ã‡Â¡' => 'Ã‡Â ',
		'Ã‡Â£' => 'Ã‡Â¢', 'Ã‡Â¥' => 'Ã‡Â¤', 'Ã‡Â§' => 'Ã‡Â¦', 'Ã‡Â©' => 'Ã‡Â¨', 'Ã‡Â«' => 'Ã‡Âª', 'Ã‡Â­' => 'Ã‡Â¬',
		'Ã‡Â¯' => 'Ã‡Â®', 'Ã‡Â³' => 'Ã‡Â±', 'Ã‡Âµ' => 'Ã‡Â´', 'Ã‡Â»' => 'Ã‡Âº', 'Ã‡Â½' => 'Ã‡Â¼', 'Ã‡Â¿' => 'Ã‡Â¾',
		'Ãˆï¿½' => 'Ãˆâ‚¬', 'ÃˆÆ’' => 'Ãˆâ€š', 'Ãˆâ€¦' => 'Ãˆâ€ž', 'Ãˆâ€¡' => 'Ãˆâ€ ', 'Ãˆâ€°' => 'ÃˆË†', 'Ãˆâ€¹' => 'ÃˆÅ ',
		'Ãˆï¿½' => 'ÃˆÅ’', 'Ãˆï¿½' => 'ÃˆÅ½', 'Ãˆâ€˜' => 'Ãˆï¿½', 'Ãˆâ€œ' => 'Ãˆâ€™', 'Ãˆâ€¢' => 'Ãˆâ€�', 'Ãˆâ€”' => 'Ãˆâ€“',
		'ÃŽÂ¬' => 'ÃŽâ€ ', 'ÃŽÂ­' => 'ÃŽË†', 'ÃŽÂ®' => 'ÃŽâ€°', 'ÃŽÂ¯' => 'ÃŽÅ ', 'Ã�Å’' => 'ÃŽÅ’', 'Ã�ï¿½' => 'ÃŽÅ½',
		'Ã�Å½' => 'ÃŽï¿½', 'ÃŽÂ±' => 'ÃŽâ€˜', 'ÃŽÂ²' => 'ÃŽâ€™', 'ÃŽÂ³' => 'ÃŽâ€œ', 'ÃŽÂ´' => 'ÃŽâ€�', 'ÃŽÂµ' => 'ÃŽâ€¢',
		'ÃŽÂ¶' => 'ÃŽâ€“', 'ÃŽÂ·' => 'ÃŽâ€”', 'ÃŽÂ¸' => 'ÃŽËœ', 'ÃŽÂ¹' => 'ÃŽâ„¢', 'ÃŽÂº' => 'ÃŽÅ¡', 'ÃŽÂ»' => 'ÃŽâ€º',
		'ÃŽÂ¼' => 'ÃŽÅ“', 'ÃŽÂ½' => 'ÃŽï¿½', 'ÃŽÂ¾' => 'ÃŽÅ¾', 'ÃŽÂ¿' => 'ÃŽÅ¸', 'Ã�â‚¬' => 'ÃŽÂ ', 'Ã�ï¿½' => 'ÃŽÂ¡',
		'Ã�Æ’' => 'ÃŽÂ£', 'Ã�â€ž' => 'ÃŽÂ¤', 'Ã�â€¦' => 'ÃŽÂ¥', 'Ã�â€ ' => 'ÃŽÂ¦', 'Ã�â€¡' => 'ÃŽÂ§', 'Ã�Ë†' => 'ÃŽÂ¨',
		'Ã�â€°' => 'ÃŽÂ©', 'Ã�Å ' => 'ÃŽÂª', 'Ã�â€¹' => 'ÃŽÂ«', 'Ã�Â£' => 'Ã�Â¢', 'Ã�Â¥' => 'Ã�Â¤', 'Ã�Â§' => 'Ã�Â¦',
		'Ã�Â©' => 'Ã�Â¨', 'Ã�Â«' => 'Ã�Âª', 'Ã�Â­' => 'Ã�Â¬', 'Ã�Â¯' => 'Ã�Â®', 'Ã‘â€˜' => 'Ã�ï¿½', 'Ã‘â€™' => 'Ã�â€š',
		'Ã‘â€œ' => 'Ã�Æ’', 'Ã‘â€�' => 'Ã�â€ž', 'Ã‘â€¢' => 'Ã�â€¦', 'Ã‘â€“' => 'Ã�â€ ', 'Ã‘â€”' => 'Ã�â€¡', 'Ã‘Ëœ' => 'Ã�Ë†',
		'Ã‘â„¢' => 'Ã�â€°', 'Ã‘Å¡' => 'Ã�Å ', 'Ã‘â€º' => 'Ã�â€¹', 'Ã‘Å“' => 'Ã�Å’', 'Ã‘Å¾' => 'Ã�Å½', 'Ã‘Å¸' => 'Ã�ï¿½',
		'Ã�Â°' => 'Ã�ï¿½', 'Ã�Â±' => 'Ã�â€˜', 'Ã�Â²' => 'Ã�â€™', 'Ã�Â³' => 'Ã�â€œ', 'Ã�Â´' => 'Ã�â€�', 'Ã�Âµ' => 'Ã�â€¢',
		'Ã�Â¶' => 'Ã�â€“', 'Ã�Â·' => 'Ã�â€”', 'Ã�Â¸' => 'Ã�Ëœ', 'Ã�Â¹' => 'Ã�â„¢', 'Ã�Âº' => 'Ã�Å¡', 'Ã�Â»' => 'Ã�â€º',
		'Ã�Â¼' => 'Ã�Å“', 'Ã�Â½' => 'Ã�ï¿½', 'Ã�Â¾' => 'Ã�Å¾', 'Ã�Â¿' => 'Ã�Å¸', 'Ã‘â‚¬' => 'Ã�Â ', 'Ã‘ï¿½' => 'Ã�Â¡',
		'Ã‘â€š' => 'Ã�Â¢', 'Ã‘Æ’' => 'Ã�Â£', 'Ã‘â€ž' => 'Ã�Â¤', 'Ã‘â€¦' => 'Ã�Â¥', 'Ã‘â€ ' => 'Ã�Â¦', 'Ã‘â€¡' => 'Ã�Â§',
		'Ã‘Ë†' => 'Ã�Â¨', 'Ã‘â€°' => 'Ã�Â©', 'Ã‘Å ' => 'Ã�Âª', 'Ã‘â€¹' => 'Ã�Â«', 'Ã‘Å’' => 'Ã�Â¬', 'Ã‘ï¿½' => 'Ã�Â­',
		'Ã‘Å½' => 'Ã�Â®', 'Ã‘ï¿½' => 'Ã�Â¯', 'Ã‘Â¡' => 'Ã‘Â ', 'Ã‘Â£' => 'Ã‘Â¢', 'Ã‘Â¥' => 'Ã‘Â¤', 'Ã‘Â§' => 'Ã‘Â¦',
		'Ã‘Â©' => 'Ã‘Â¨', 'Ã‘Â«' => 'Ã‘Âª', 'Ã‘Â­' => 'Ã‘Â¬', 'Ã‘Â¯' => 'Ã‘Â®', 'Ã‘Â±' => 'Ã‘Â°', 'Ã‘Â³' => 'Ã‘Â²',
		'Ã‘Âµ' => 'Ã‘Â´', 'Ã‘Â·' => 'Ã‘Â¶', 'Ã‘Â¹' => 'Ã‘Â¸', 'Ã‘Â»' => 'Ã‘Âº', 'Ã‘Â½' => 'Ã‘Â¼', 'Ã‘Â¿' => 'Ã‘Â¾',
		'Ã’ï¿½' => 'Ã’â‚¬', 'Ã’â€˜' => 'Ã’ï¿½', 'Ã’â€œ' => 'Ã’â€™', 'Ã’â€¢' => 'Ã’â€�', 'Ã’â€”' => 'Ã’â€“', 'Ã’â„¢' => 'Ã’Ëœ',
		'Ã’â€º' => 'Ã’Å¡', 'Ã’ï¿½' => 'Ã’Å“', 'Ã’Å¸' => 'Ã’Å¾', 'Ã’Â¡' => 'Ã’Â ', 'Ã’Â£' => 'Ã’Â¢', 'Ã’Â¥' => 'Ã’Â¤',
		'Ã’Â§' => 'Ã’Â¦', 'Ã’Â©' => 'Ã’Â¨', 'Ã’Â«' => 'Ã’Âª', 'Ã’Â­' => 'Ã’Â¬', 'Ã’Â¯' => 'Ã’Â®', 'Ã’Â±' => 'Ã’Â°',
		'Ã’Â³' => 'Ã’Â²', 'Ã’Âµ' => 'Ã’Â´', 'Ã’Â·' => 'Ã’Â¶', 'Ã’Â¹' => 'Ã’Â¸', 'Ã’Â»' => 'Ã’Âº', 'Ã’Â½' => 'Ã’Â¼',
		'Ã’Â¿' => 'Ã’Â¾', 'Ã“â€š' => 'Ã“ï¿½', 'Ã“â€ž' => 'Ã“Æ’', 'Ã“Ë†' => 'Ã“â€¡', 'Ã“Å’' => 'Ã“â€¹', 'Ã“â€˜' => 'Ã“ï¿½',
		'Ã“â€œ' => 'Ã“â€™', 'Ã“â€¢' => 'Ã“â€�', 'Ã“â€”' => 'Ã“â€“', 'Ã“â„¢' => 'Ã“Ëœ', 'Ã“â€º' => 'Ã“Å¡', 'Ã“ï¿½' => 'Ã“Å“',
		'Ã“Å¸' => 'Ã“Å¾', 'Ã“Â¡' => 'Ã“Â ', 'Ã“Â£' => 'Ã“Â¢', 'Ã“Â¥' => 'Ã“Â¤', 'Ã“Â§' => 'Ã“Â¦', 'Ã“Â©' => 'Ã“Â¨',
		'Ã“Â«' => 'Ã“Âª', 'Ã“Â¯' => 'Ã“Â®', 'Ã“Â±' => 'Ã“Â°', 'Ã“Â³' => 'Ã“Â²', 'Ã“Âµ' => 'Ã“Â´', 'Ã“Â¹' => 'Ã“Â¸',
		'Ã•Â¡' => 'Ã”Â±', 'Ã•Â¢' => 'Ã”Â²', 'Ã•Â£' => 'Ã”Â³', 'Ã•Â¤' => 'Ã”Â´', 'Ã•Â¥' => 'Ã”Âµ', 'Ã•Â¦' => 'Ã”Â¶',
		'Ã•Â§' => 'Ã”Â·', 'Ã•Â¨' => 'Ã”Â¸', 'Ã•Â©' => 'Ã”Â¹', 'Ã•Âª' => 'Ã”Âº', 'Ã•Â«' => 'Ã”Â»', 'Ã•Â¬' => 'Ã”Â¼',
		'Ã•Â­' => 'Ã”Â½', 'Ã•Â®' => 'Ã”Â¾', 'Ã•Â¯' => 'Ã”Â¿', 'Ã•Â°' => 'Ã•â‚¬', 'Ã•Â±' => 'Ã•ï¿½', 'Ã•Â²' => 'Ã•â€š',
		'Ã•Â³' => 'Ã•Æ’', 'Ã•Â´' => 'Ã•â€ž', 'Ã•Âµ' => 'Ã•â€¦', 'Ã•Â¶' => 'Ã•â€ ', 'Ã•Â·' => 'Ã•â€¡', 'Ã•Â¸' => 'Ã•Ë†',
		'Ã•Â¹' => 'Ã•â€°', 'Ã•Âº' => 'Ã•Å ', 'Ã•Â»' => 'Ã•â€¹', 'Ã•Â¼' => 'Ã•Å’', 'Ã•Â½' => 'Ã•ï¿½', 'Ã•Â¾' => 'Ã•Å½',
		'Ã•Â¿' => 'Ã•ï¿½', 'Ã–â‚¬' => 'Ã•ï¿½', 'Ã–ï¿½' => 'Ã•â€˜', 'Ã–â€š' => 'Ã•â€™', 'Ã–Æ’' => 'Ã•â€œ', 'Ã–â€ž' => 'Ã•â€�',
		'Ã–â€¦' => 'Ã•â€¢', 'Ã–â€ ' => 'Ã•â€“', 'Ã¡Æ’ï¿½' => 'Ã¡â€šÂ ', 'Ã¡Æ’â€˜' => 'Ã¡â€šÂ¡', 'Ã¡Æ’â€™' => 'Ã¡â€šÂ¢', 'Ã¡Æ’â€œ' => 'Ã¡â€šÂ£',
		'Ã¡Æ’â€�' => 'Ã¡â€šÂ¤', 'Ã¡Æ’â€¢' => 'Ã¡â€šÂ¥', 'Ã¡Æ’â€“' => 'Ã¡â€šÂ¦', 'Ã¡Æ’â€”' => 'Ã¡â€šÂ§', 'Ã¡Æ’Ëœ' => 'Ã¡â€šÂ¨', 'Ã¡Æ’â„¢' => 'Ã¡â€šÂ©',
		'Ã¡Æ’Å¡' => 'Ã¡â€šÂª', 'Ã¡Æ’â€º' => 'Ã¡â€šÂ«', 'Ã¡Æ’Å“' => 'Ã¡â€šÂ¬', 'Ã¡Æ’ï¿½' => 'Ã¡â€šÂ­', 'Ã¡Æ’Å¾' => 'Ã¡â€šÂ®', 'Ã¡Æ’Å¸' => 'Ã¡â€šÂ¯',
		'Ã¡Æ’Â ' => 'Ã¡â€šÂ°', 'Ã¡Æ’Â¡' => 'Ã¡â€šÂ±', 'Ã¡Æ’Â¢' => 'Ã¡â€šÂ²', 'Ã¡Æ’Â£' => 'Ã¡â€šÂ³', 'Ã¡Æ’Â¤' => 'Ã¡â€šÂ´', 'Ã¡Æ’Â¥' => 'Ã¡â€šÂµ',
		'Ã¡Æ’Â¦' => 'Ã¡â€šÂ¶', 'Ã¡Æ’Â§' => 'Ã¡â€šÂ·', 'Ã¡Æ’Â¨' => 'Ã¡â€šÂ¸', 'Ã¡Æ’Â©' => 'Ã¡â€šÂ¹', 'Ã¡Æ’Âª' => 'Ã¡â€šÂº', 'Ã¡Æ’Â«' => 'Ã¡â€šÂ»',
		'Ã¡Æ’Â¬' => 'Ã¡â€šÂ¼', 'Ã¡Æ’Â­' => 'Ã¡â€šÂ½', 'Ã¡Æ’Â®' => 'Ã¡â€šÂ¾', 'Ã¡Æ’Â¯' => 'Ã¡â€šÂ¿', 'Ã¡Æ’Â°' => 'Ã¡Æ’â‚¬', 'Ã¡Æ’Â±' => 'Ã¡Æ’ï¿½',
		'Ã¡Æ’Â²' => 'Ã¡Æ’â€š', 'Ã¡Æ’Â³' => 'Ã¡Æ’Æ’', 'Ã¡Æ’Â´' => 'Ã¡Æ’â€ž', 'Ã¡Æ’Âµ' => 'Ã¡Æ’â€¦', 'Ã¡Â¸ï¿½' => 'Ã¡Â¸â‚¬', 'Ã¡Â¸Æ’' => 'Ã¡Â¸â€š',
		'Ã¡Â¸â€¦' => 'Ã¡Â¸â€ž', 'Ã¡Â¸â€¡' => 'Ã¡Â¸â€ ', 'Ã¡Â¸â€°' => 'Ã¡Â¸Ë†', 'Ã¡Â¸â€¹' => 'Ã¡Â¸Å ', 'Ã¡Â¸ï¿½' => 'Ã¡Â¸Å’', 'Ã¡Â¸ï¿½' => 'Ã¡Â¸Å½',
		'Ã¡Â¸â€˜' => 'Ã¡Â¸ï¿½', 'Ã¡Â¸â€œ' => 'Ã¡Â¸â€™', 'Ã¡Â¸â€¢' => 'Ã¡Â¸â€�', 'Ã¡Â¸â€”' => 'Ã¡Â¸â€“', 'Ã¡Â¸â„¢' => 'Ã¡Â¸Ëœ', 'Ã¡Â¸â€º' => 'Ã¡Â¸Å¡',
		'Ã¡Â¸ï¿½' => 'Ã¡Â¸Å“', 'Ã¡Â¸Å¸' => 'Ã¡Â¸Å¾', 'Ã¡Â¸Â¡' => 'Ã¡Â¸Â ', 'Ã¡Â¸Â£' => 'Ã¡Â¸Â¢', 'Ã¡Â¸Â¥' => 'Ã¡Â¸Â¤', 'Ã¡Â¸Â§' => 'Ã¡Â¸Â¦',
		'Ã¡Â¸Â©' => 'Ã¡Â¸Â¨', 'Ã¡Â¸Â«' => 'Ã¡Â¸Âª', 'Ã¡Â¸Â­' => 'Ã¡Â¸Â¬', 'Ã¡Â¸Â¯' => 'Ã¡Â¸Â®', 'Ã¡Â¸Â±' => 'Ã¡Â¸Â°', 'Ã¡Â¸Â³' => 'Ã¡Â¸Â²',
		'Ã¡Â¸Âµ' => 'Ã¡Â¸Â´', 'Ã¡Â¸Â·' => 'Ã¡Â¸Â¶', 'Ã¡Â¸Â¹' => 'Ã¡Â¸Â¸', 'Ã¡Â¸Â»' => 'Ã¡Â¸Âº', 'Ã¡Â¸Â½' => 'Ã¡Â¸Â¼', 'Ã¡Â¸Â¿' => 'Ã¡Â¸Â¾',
		'Ã¡Â¹ï¿½' => 'Ã¡Â¹â‚¬', 'Ã¡Â¹Æ’' => 'Ã¡Â¹â€š', 'Ã¡Â¹â€¦' => 'Ã¡Â¹â€ž', 'Ã¡Â¹â€¡' => 'Ã¡Â¹â€ ', 'Ã¡Â¹â€°' => 'Ã¡Â¹Ë†', 'Ã¡Â¹â€¹' => 'Ã¡Â¹Å ',
		'Ã¡Â¹ï¿½' => 'Ã¡Â¹Å’', 'Ã¡Â¹ï¿½' => 'Ã¡Â¹Å½', 'Ã¡Â¹â€˜' => 'Ã¡Â¹ï¿½', 'Ã¡Â¹â€œ' => 'Ã¡Â¹â€™', 'Ã¡Â¹â€¢' => 'Ã¡Â¹â€�', 'Ã¡Â¹â€”' => 'Ã¡Â¹â€“',
		'Ã¡Â¹â„¢' => 'Ã¡Â¹Ëœ', 'Ã¡Â¹â€º' => 'Ã¡Â¹Å¡', 'Ã¡Â¹ï¿½' => 'Ã¡Â¹Å“', 'Ã¡Â¹Å¸' => 'Ã¡Â¹Å¾', 'Ã¡Â¹Â¡' => 'Ã¡Â¹Â ', 'Ã¡Â¹Â£' => 'Ã¡Â¹Â¢',
		'Ã¡Â¹Â¥' => 'Ã¡Â¹Â¤', 'Ã¡Â¹Â§' => 'Ã¡Â¹Â¦', 'Ã¡Â¹Â©' => 'Ã¡Â¹Â¨', 'Ã¡Â¹Â«' => 'Ã¡Â¹Âª', 'Ã¡Â¹Â­' => 'Ã¡Â¹Â¬', 'Ã¡Â¹Â¯' => 'Ã¡Â¹Â®',
		'Ã¡Â¹Â±' => 'Ã¡Â¹Â°', 'Ã¡Â¹Â³' => 'Ã¡Â¹Â²', 'Ã¡Â¹Âµ' => 'Ã¡Â¹Â´', 'Ã¡Â¹Â·' => 'Ã¡Â¹Â¶', 'Ã¡Â¹Â¹' => 'Ã¡Â¹Â¸', 'Ã¡Â¹Â»' => 'Ã¡Â¹Âº',
		'Ã¡Â¹Â½' => 'Ã¡Â¹Â¼', 'Ã¡Â¹Â¿' => 'Ã¡Â¹Â¾', 'Ã¡Âºï¿½' => 'Ã¡Âºâ‚¬', 'Ã¡ÂºÆ’' => 'Ã¡Âºâ€š', 'Ã¡Âºâ€¦' => 'Ã¡Âºâ€ž', 'Ã¡Âºâ€¡' => 'Ã¡Âºâ€ ',
		'Ã¡Âºâ€°' => 'Ã¡ÂºË†', 'Ã¡Âºâ€¹' => 'Ã¡ÂºÅ ', 'Ã¡Âºï¿½' => 'Ã¡ÂºÅ’', 'Ã¡Âºï¿½' => 'Ã¡ÂºÅ½', 'Ã¡Âºâ€˜' => 'Ã¡Âºï¿½', 'Ã¡Âºâ€œ' => 'Ã¡Âºâ€™',
		'Ã¡Âºâ€¢' => 'Ã¡Âºâ€�', 'Ã¡ÂºÂ¡' => 'Ã¡ÂºÂ ', 'Ã¡ÂºÂ£' => 'Ã¡ÂºÂ¢', 'Ã¡ÂºÂ¥' => 'Ã¡ÂºÂ¤', 'Ã¡ÂºÂ§' => 'Ã¡ÂºÂ¦', 'Ã¡ÂºÂ©' => 'Ã¡ÂºÂ¨',
		'Ã¡ÂºÂ«' => 'Ã¡ÂºÂª', 'Ã¡ÂºÂ­' => 'Ã¡ÂºÂ¬', 'Ã¡ÂºÂ¯' => 'Ã¡ÂºÂ®', 'Ã¡ÂºÂ±' => 'Ã¡ÂºÂ°', 'Ã¡ÂºÂ³' => 'Ã¡ÂºÂ²', 'Ã¡ÂºÂµ' => 'Ã¡ÂºÂ´',
		'Ã¡ÂºÂ·' => 'Ã¡ÂºÂ¶', 'Ã¡ÂºÂ¹' => 'Ã¡ÂºÂ¸', 'Ã¡ÂºÂ»' => 'Ã¡ÂºÂº', 'Ã¡ÂºÂ½' => 'Ã¡ÂºÂ¼', 'Ã¡ÂºÂ¿' => 'Ã¡ÂºÂ¾', 'Ã¡Â»ï¿½' => 'Ã¡Â»â‚¬',
		'Ã¡Â»Æ’' => 'Ã¡Â»â€š', 'Ã¡Â»â€¦' => 'Ã¡Â»â€ž', 'Ã¡Â»â€¡' => 'Ã¡Â»â€ ', 'Ã¡Â»â€°' => 'Ã¡Â»Ë†', 'Ã¡Â»â€¹' => 'Ã¡Â»Å ', 'Ã¡Â»ï¿½' => 'Ã¡Â»Å’',
		'Ã¡Â»ï¿½' => 'Ã¡Â»Å½', 'Ã¡Â»â€˜' => 'Ã¡Â»ï¿½', 'Ã¡Â»â€œ' => 'Ã¡Â»â€™', 'Ã¡Â»â€¢' => 'Ã¡Â»â€�', 'Ã¡Â»â€”' => 'Ã¡Â»â€“', 'Ã¡Â»â„¢' => 'Ã¡Â»Ëœ',
		'Ã¡Â»â€º' => 'Ã¡Â»Å¡', 'Ã¡Â»ï¿½' => 'Ã¡Â»Å“', 'Ã¡Â»Å¸' => 'Ã¡Â»Å¾', 'Ã¡Â»Â¡' => 'Ã¡Â»Â ', 'Ã¡Â»Â£' => 'Ã¡Â»Â¢', 'Ã¡Â»Â¥' => 'Ã¡Â»Â¤',
		'Ã¡Â»Â§' => 'Ã¡Â»Â¦', 'Ã¡Â»Â©' => 'Ã¡Â»Â¨', 'Ã¡Â»Â«' => 'Ã¡Â»Âª', 'Ã¡Â»Â­' => 'Ã¡Â»Â¬', 'Ã¡Â»Â¯' => 'Ã¡Â»Â®', 'Ã¡Â»Â±' => 'Ã¡Â»Â°',
		'Ã¡Â»Â³' => 'Ã¡Â»Â²', 'Ã¡Â»Âµ' => 'Ã¡Â»Â´', 'Ã¡Â»Â·' => 'Ã¡Â»Â¶', 'Ã¡Â»Â¹' => 'Ã¡Â»Â¸', 'Ã¡Â¼â‚¬' => 'Ã¡Â¼Ë†', 'Ã¡Â¼ï¿½' => 'Ã¡Â¼â€°',
		'Ã¡Â¼â€š' => 'Ã¡Â¼Å ', 'Ã¡Â¼Æ’' => 'Ã¡Â¼â€¹', 'Ã¡Â¼â€ž' => 'Ã¡Â¼Å’', 'Ã¡Â¼â€¦' => 'Ã¡Â¼ï¿½', 'Ã¡Â¼â€ ' => 'Ã¡Â¼Å½', 'Ã¡Â¼â€¡' => 'Ã¡Â¼ï¿½',
		'Ã¡Â¼ï¿½' => 'Ã¡Â¼Ëœ', 'Ã¡Â¼â€˜' => 'Ã¡Â¼â„¢', 'Ã¡Â¼â€™' => 'Ã¡Â¼Å¡', 'Ã¡Â¼â€œ' => 'Ã¡Â¼â€º', 'Ã¡Â¼â€�' => 'Ã¡Â¼Å“', 'Ã¡Â¼â€¢' => 'Ã¡Â¼ï¿½',
		'Ã¡Â¼Â ' => 'Ã¡Â¼Â¨', 'Ã¡Â¼Â¡' => 'Ã¡Â¼Â©', 'Ã¡Â¼Â¢' => 'Ã¡Â¼Âª', 'Ã¡Â¼Â£' => 'Ã¡Â¼Â«', 'Ã¡Â¼Â¤' => 'Ã¡Â¼Â¬', 'Ã¡Â¼Â¥' => 'Ã¡Â¼Â­',
		'Ã¡Â¼Â¦' => 'Ã¡Â¼Â®', 'Ã¡Â¼Â§' => 'Ã¡Â¼Â¯', 'Ã¡Â¼Â°' => 'Ã¡Â¼Â¸', 'Ã¡Â¼Â±' => 'Ã¡Â¼Â¹', 'Ã¡Â¼Â²' => 'Ã¡Â¼Âº', 'Ã¡Â¼Â³' => 'Ã¡Â¼Â»',
		'Ã¡Â¼Â´' => 'Ã¡Â¼Â¼', 'Ã¡Â¼Âµ' => 'Ã¡Â¼Â½', 'Ã¡Â¼Â¶' => 'Ã¡Â¼Â¾', 'Ã¡Â¼Â·' => 'Ã¡Â¼Â¿', 'Ã¡Â½â‚¬' => 'Ã¡Â½Ë†', 'Ã¡Â½ï¿½' => 'Ã¡Â½â€°',
		'Ã¡Â½â€š' => 'Ã¡Â½Å ', 'Ã¡Â½Æ’' => 'Ã¡Â½â€¹', 'Ã¡Â½â€ž' => 'Ã¡Â½Å’', 'Ã¡Â½â€¦' => 'Ã¡Â½ï¿½', 'Ã¡Â½â€˜' => 'Ã¡Â½â„¢', 'Ã¡Â½â€œ' => 'Ã¡Â½â€º',
		'Ã¡Â½â€¢' => 'Ã¡Â½ï¿½', 'Ã¡Â½â€”' => 'Ã¡Â½Å¸', 'Ã¡Â½Â ' => 'Ã¡Â½Â¨', 'Ã¡Â½Â¡' => 'Ã¡Â½Â©', 'Ã¡Â½Â¢' => 'Ã¡Â½Âª', 'Ã¡Â½Â£' => 'Ã¡Â½Â«',
		'Ã¡Â½Â¤' => 'Ã¡Â½Â¬', 'Ã¡Â½Â¥' => 'Ã¡Â½Â­', 'Ã¡Â½Â¦' => 'Ã¡Â½Â®', 'Ã¡Â½Â§' => 'Ã¡Â½Â¯', 'Ã¡Â¾â‚¬' => 'Ã¡Â¾Ë†', 'Ã¡Â¾ï¿½' => 'Ã¡Â¾â€°',
		'Ã¡Â¾â€š' => 'Ã¡Â¾Å ', 'Ã¡Â¾Æ’' => 'Ã¡Â¾â€¹', 'Ã¡Â¾â€ž' => 'Ã¡Â¾Å’', 'Ã¡Â¾â€¦' => 'Ã¡Â¾ï¿½', 'Ã¡Â¾â€ ' => 'Ã¡Â¾Å½', 'Ã¡Â¾â€¡' => 'Ã¡Â¾ï¿½',
		'Ã¡Â¾ï¿½' => 'Ã¡Â¾Ëœ', 'Ã¡Â¾â€˜' => 'Ã¡Â¾â„¢', 'Ã¡Â¾â€™' => 'Ã¡Â¾Å¡', 'Ã¡Â¾â€œ' => 'Ã¡Â¾â€º', 'Ã¡Â¾â€�' => 'Ã¡Â¾Å“', 'Ã¡Â¾â€¢' => 'Ã¡Â¾ï¿½',
		'Ã¡Â¾â€“' => 'Ã¡Â¾Å¾', 'Ã¡Â¾â€”' => 'Ã¡Â¾Å¸', 'Ã¡Â¾Â ' => 'Ã¡Â¾Â¨', 'Ã¡Â¾Â¡' => 'Ã¡Â¾Â©', 'Ã¡Â¾Â¢' => 'Ã¡Â¾Âª', 'Ã¡Â¾Â£' => 'Ã¡Â¾Â«',
		'Ã¡Â¾Â¤' => 'Ã¡Â¾Â¬', 'Ã¡Â¾Â¥' => 'Ã¡Â¾Â­', 'Ã¡Â¾Â¦' => 'Ã¡Â¾Â®', 'Ã¡Â¾Â§' => 'Ã¡Â¾Â¯', 'Ã¡Â¾Â°' => 'Ã¡Â¾Â¸', 'Ã¡Â¾Â±' => 'Ã¡Â¾Â¹',
		'Ã¡Â¿ï¿½' => 'Ã¡Â¿Ëœ', 'Ã¡Â¿â€˜' => 'Ã¡Â¿â„¢', 'Ã¡Â¿Â ' => 'Ã¡Â¿Â¨', 'Ã¡Â¿Â¡' => 'Ã¡Â¿Â©', 'Ã¢â€œï¿½' => 'Ã¢â€™Â¶', 'Ã¢â€œâ€˜' => 'Ã¢â€™Â·',
		'Ã¢â€œâ€™' => 'Ã¢â€™Â¸', 'Ã¢â€œâ€œ' => 'Ã¢â€™Â¹', 'Ã¢â€œâ€�' => 'Ã¢â€™Âº', 'Ã¢â€œâ€¢' => 'Ã¢â€™Â»', 'Ã¢â€œâ€“' => 'Ã¢â€™Â¼', 'Ã¢â€œâ€”' => 'Ã¢â€™Â½',
		'Ã¢â€œËœ' => 'Ã¢â€™Â¾', 'Ã¢â€œâ„¢' => 'Ã¢â€™Â¿', 'Ã¢â€œÅ¡' => 'Ã¢â€œâ‚¬', 'Ã¢â€œâ€º' => 'Ã¢â€œï¿½', 'Ã¢â€œÅ“' => 'Ã¢â€œâ€š', 'Ã¢â€œï¿½' => 'Ã¢â€œÆ’',
		'Ã¢â€œÅ¾' => 'Ã¢â€œâ€ž', 'Ã¢â€œÅ¸' => 'Ã¢â€œâ€¦', 'Ã¢â€œÂ ' => 'Ã¢â€œâ€ ', 'Ã¢â€œÂ¡' => 'Ã¢â€œâ€¡', 'Ã¢â€œÂ¢' => 'Ã¢â€œË†', 'Ã¢â€œÂ£' => 'Ã¢â€œâ€°',
		'Ã¢â€œÂ¤' => 'Ã¢â€œÅ ', 'Ã¢â€œÂ¥' => 'Ã¢â€œâ€¹', 'Ã¢â€œÂ¦' => 'Ã¢â€œÅ’', 'Ã¢â€œÂ§' => 'Ã¢â€œï¿½', 'Ã¢â€œÂ¨' => 'Ã¢â€œÅ½', 'Ã¢â€œÂ©' => 'Ã¢â€œï¿½',
		'Ã¯Â½ï¿½' => 'Ã¯Â¼Â¡', 'Ã¯Â½â€š' => 'Ã¯Â¼Â¢', 'Ã¯Â½Æ’' => 'Ã¯Â¼Â£', 'Ã¯Â½â€ž' => 'Ã¯Â¼Â¤', 'Ã¯Â½â€¦' => 'Ã¯Â¼Â¥', 'Ã¯Â½â€ ' => 'Ã¯Â¼Â¦',
		'Ã¯Â½â€¡' => 'Ã¯Â¼Â§', 'Ã¯Â½Ë†' => 'Ã¯Â¼Â¨', 'Ã¯Â½â€°' => 'Ã¯Â¼Â©', 'Ã¯Â½Å ' => 'Ã¯Â¼Âª', 'Ã¯Â½â€¹' => 'Ã¯Â¼Â«', 'Ã¯Â½Å’' => 'Ã¯Â¼Â¬',
		'Ã¯Â½ï¿½' => 'Ã¯Â¼Â­', 'Ã¯Â½Å½' => 'Ã¯Â¼Â®', 'Ã¯Â½ï¿½' => 'Ã¯Â¼Â¯', 'Ã¯Â½ï¿½' => 'Ã¯Â¼Â°', 'Ã¯Â½â€˜' => 'Ã¯Â¼Â±', 'Ã¯Â½â€™' => 'Ã¯Â¼Â²',
		'Ã¯Â½â€œ' => 'Ã¯Â¼Â³', 'Ã¯Â½â€�' => 'Ã¯Â¼Â´', 'Ã¯Â½â€¢' => 'Ã¯Â¼Âµ', 'Ã¯Â½â€“' => 'Ã¯Â¼Â¶', 'Ã¯Â½â€”' => 'Ã¯Â¼Â·', 'Ã¯Â½Ëœ' => 'Ã¯Â¼Â¸',
		'Ã¯Â½â„¢' => 'Ã¯Â¼Â¹', 'Ã¯Â½Å¡' => 'Ã¯Â¼Âº'
	);

	/**
	 * All lowercase UTF-8 characters not properly handled by [http://php.net/mb_strtoupper mb_strtoupper()] mapped to uppercase characters
	 *
	 * @var array
	 */
	static private $mb_lower_to_upper_fix = array(
		'Ã‰Ëœ' => 'Ã†Å½', 'Ã‡Â²' => 'Ã‡Â±', 'Ã¡Æ’ï¿½' => 'Ã¡â€šÂ ', 'Ã¡Æ’â€˜' => 'Ã¡â€šÂ¡', 'Ã¡Æ’â€™' => 'Ã¡â€šÂ¢', 'Ã¡Æ’â€œ' => 'Ã¡â€šÂ£',
		'Ã¡Æ’â€�' => 'Ã¡â€šÂ¤', 'Ã¡Æ’â€¢' => 'Ã¡â€šÂ¥', 'Ã¡Æ’â€“' => 'Ã¡â€šÂ¦', 'Ã¡Æ’â€”' => 'Ã¡â€šÂ§', 'Ã¡Æ’Ëœ' => 'Ã¡â€šÂ¨', 'Ã¡Æ’â„¢' => 'Ã¡â€šÂ©',
		'Ã¡Æ’Å¡' => 'Ã¡â€šÂª', 'Ã¡Æ’â€º' => 'Ã¡â€šÂ«', 'Ã¡Æ’Å“' => 'Ã¡â€šÂ¬', 'Ã¡Æ’ï¿½' => 'Ã¡â€šÂ­', 'Ã¡Æ’Å¾' => 'Ã¡â€šÂ®', 'Ã¡Æ’Å¸' => 'Ã¡â€šÂ¯',
		'Ã¡Æ’Â ' => 'Ã¡â€šÂ°', 'Ã¡Æ’Â¡' => 'Ã¡â€šÂ±', 'Ã¡Æ’Â¢' => 'Ã¡â€šÂ²', 'Ã¡Æ’Â£' => 'Ã¡â€šÂ³', 'Ã¡Æ’Â¤' => 'Ã¡â€šÂ´', 'Ã¡Æ’Â¥' => 'Ã¡â€šÂµ',
		'Ã¡Æ’Â¦' => 'Ã¡â€šÂ¶', 'Ã¡Æ’Â§' => 'Ã¡â€šÂ·', 'Ã¡Æ’Â¨' => 'Ã¡â€šÂ¸', 'Ã¡Æ’Â©' => 'Ã¡â€šÂ¹', 'Ã¡Æ’Âª' => 'Ã¡â€šÂº', 'Ã¡Æ’Â«' => 'Ã¡â€šÂ»',
		'Ã¡Æ’Â¬' => 'Ã¡â€šÂ¼', 'Ã¡Æ’Â­' => 'Ã¡â€šÂ½', 'Ã¡Æ’Â®' => 'Ã¡â€šÂ¾', 'Ã¡Æ’Â¯' => 'Ã¡â€šÂ¿', 'Ã¡Æ’Â°' => 'Ã¡Æ’â‚¬', 'Ã¡Æ’Â±' => 'Ã¡Æ’ï¿½',
		'Ã¡Æ’Â²' => 'Ã¡Æ’â€š', 'Ã¡Æ’Â³' => 'Ã¡Æ’Æ’', 'Ã¡Æ’Â´' => 'Ã¡Æ’â€ž', 'Ã¡Æ’Âµ' => 'Ã¡Æ’â€¦', 'Ã¢â€œï¿½' => 'Ã¢â€™Â¶', 'Ã¢â€œâ€˜' => 'Ã¢â€™Â·',
		'Ã¢â€œâ€™' => 'Ã¢â€™Â¸', 'Ã¢â€œâ€œ' => 'Ã¢â€™Â¹', 'Ã¢â€œâ€�' => 'Ã¢â€™Âº', 'Ã¢â€œâ€¢' => 'Ã¢â€™Â»', 'Ã¢â€œâ€“' => 'Ã¢â€™Â¼', 'Ã¢â€œâ€”' => 'Ã¢â€™Â½',
		'Ã¢â€œËœ' => 'Ã¢â€™Â¾', 'Ã¢â€œâ„¢' => 'Ã¢â€™Â¿', 'Ã¢â€œÅ¡' => 'Ã¢â€œâ‚¬', 'Ã¢â€œâ€º' => 'Ã¢â€œï¿½', 'Ã¢â€œÅ“' => 'Ã¢â€œâ€š', 'Ã¢â€œï¿½' => 'Ã¢â€œÆ’',
		'Ã¢â€œÅ¾' => 'Ã¢â€œâ€ž', 'Ã¢â€œÅ¸' => 'Ã¢â€œâ€¦', 'Ã¢â€œÂ ' => 'Ã¢â€œâ€ ', 'Ã¢â€œÂ¡' => 'Ã¢â€œâ€¡', 'Ã¢â€œÂ¢' => 'Ã¢â€œË†', 'Ã¢â€œÂ£' => 'Ã¢â€œâ€°',
		'Ã¢â€œÂ¤' => 'Ã¢â€œÅ ', 'Ã¢â€œÂ¥' => 'Ã¢â€œâ€¹', 'Ã¢â€œÂ¦' => 'Ã¢â€œÅ’', 'Ã¢â€œÂ§' => 'Ã¢â€œï¿½', 'Ã¢â€œÂ¨' => 'Ã¢â€œÅ½', 'Ã¢â€œÂ©' => 'Ã¢â€œï¿½'
	);

	/**
	 * All uppercase UTF-8 characters not properly handled by [http://php.net/mb_strtolower mb_strtolower()] mapped to lowercase characters
	 *
	 * @var array
	 */
	static private $mb_upper_to_lower_fix = array(
		'Ã‡ï¿½' => 'Ã‰Ëœ', 'Ã‡â€¦' => 'Ã‡â€ ', 'Ã‡Ë†' => 'Ã‡â€°', 'Ã‡â€¹' => 'Ã‡Å’', 'Ã¡â€šÂ ' => 'Ã¡Æ’ï¿½', 'Ã¡â€šÂ¡' => 'Ã¡Æ’â€˜',
		'Ã¡â€šÂ¢' => 'Ã¡Æ’â€™', 'Ã¡â€šÂ£' => 'Ã¡Æ’â€œ', 'Ã¡â€šÂ¤' => 'Ã¡Æ’â€�', 'Ã¡â€šÂ¥' => 'Ã¡Æ’â€¢', 'Ã¡â€šÂ¦' => 'Ã¡Æ’â€“', 'Ã¡â€šÂ§' => 'Ã¡Æ’â€”',
		'Ã¡â€šÂ¨' => 'Ã¡Æ’Ëœ', 'Ã¡â€šÂ©' => 'Ã¡Æ’â„¢', 'Ã¡â€šÂª' => 'Ã¡Æ’Å¡', 'Ã¡â€šÂ«' => 'Ã¡Æ’â€º', 'Ã¡â€šÂ¬' => 'Ã¡Æ’Å“', 'Ã¡â€šÂ­' => 'Ã¡Æ’ï¿½',
		'Ã¡â€šÂ®' => 'Ã¡Æ’Å¾', 'Ã¡â€šÂ¯' => 'Ã¡Æ’Å¸', 'Ã¡â€šÂ°' => 'Ã¡Æ’Â ', 'Ã¡â€šÂ±' => 'Ã¡Æ’Â¡', 'Ã¡â€šÂ²' => 'Ã¡Æ’Â¢', 'Ã¡â€šÂ³' => 'Ã¡Æ’Â£',
		'Ã¡â€šÂ´' => 'Ã¡Æ’Â¤', 'Ã¡â€šÂµ' => 'Ã¡Æ’Â¥', 'Ã¡â€šÂ¶' => 'Ã¡Æ’Â¦', 'Ã¡â€šÂ·' => 'Ã¡Æ’Â§', 'Ã¡â€šÂ¸' => 'Ã¡Æ’Â¨', 'Ã¡â€šÂ¹' => 'Ã¡Æ’Â©',
		'Ã¡â€šÂº' => 'Ã¡Æ’Âª', 'Ã¡â€šÂ»' => 'Ã¡Æ’Â«', 'Ã¡â€šÂ¼' => 'Ã¡Æ’Â¬', 'Ã¡â€šÂ½' => 'Ã¡Æ’Â­', 'Ã¡â€šÂ¾' => 'Ã¡Æ’Â®', 'Ã¡â€šÂ¿' => 'Ã¡Æ’Â¯',
		'Ã¡Æ’â‚¬' => 'Ã¡Æ’Â°', 'Ã¡Æ’ï¿½' => 'Ã¡Æ’Â±', 'Ã¡Æ’â€š' => 'Ã¡Æ’Â²', 'Ã¡Æ’Æ’' => 'Ã¡Æ’Â³', 'Ã¡Æ’â€ž' => 'Ã¡Æ’Â´', 'Ã¡Æ’â€¦' => 'Ã¡Æ’Âµ',
		'Ã¡Â¾Ë†' => 'Ã¡Â¾â‚¬', 'Ã¡Â¾â€°' => 'Ã¡Â¾ï¿½', 'Ã¡Â¾Å ' => 'Ã¡Â¾â€š', 'Ã¡Â¾â€¹' => 'Ã¡Â¾Æ’', 'Ã¡Â¾Å’' => 'Ã¡Â¾â€ž', 'Ã¡Â¾ï¿½' => 'Ã¡Â¾â€¦',
		'Ã¡Â¾Å½' => 'Ã¡Â¾â€ ', 'Ã¡Â¾ï¿½' => 'Ã¡Â¾â€¡', 'Ã¡Â¾Ëœ' => 'Ã¡Â¾ï¿½', 'Ã¡Â¾â„¢' => 'Ã¡Â¾â€˜', 'Ã¡Â¾Å¡' => 'Ã¡Â¾â€™', 'Ã¡Â¾â€º' => 'Ã¡Â¾â€œ',
		'Ã¡Â¾Å“' => 'Ã¡Â¾â€�', 'Ã¡Â¾ï¿½' => 'Ã¡Â¾â€¢', 'Ã¡Â¾Å¾' => 'Ã¡Â¾â€“', 'Ã¡Â¾Å¸' => 'Ã¡Â¾â€”', 'Ã¡Â¾Â¨' => 'Ã¡Â¾Â ', 'Ã¡Â¾Â©' => 'Ã¡Â¾Â¡',
		'Ã¡Â¾Âª' => 'Ã¡Â¾Â¢', 'Ã¡Â¾Â«' => 'Ã¡Â¾Â£', 'Ã¡Â¾Â¬' => 'Ã¡Â¾Â¤', 'Ã¡Â¾Â­' => 'Ã¡Â¾Â¥', 'Ã¡Â¾Â®' => 'Ã¡Â¾Â¦', 'Ã¡Â¾Â¯' => 'Ã¡Â¾Â§',
		'Ã¢â€™Â¶' => 'Ã¢â€œï¿½', 'Ã¢â€™Â·' => 'Ã¢â€œâ€˜', 'Ã¢â€™Â¸' => 'Ã¢â€œâ€™', 'Ã¢â€™Â¹' => 'Ã¢â€œâ€œ', 'Ã¢â€™Âº' => 'Ã¢â€œâ€�', 'Ã¢â€™Â»' => 'Ã¢â€œâ€¢',
		'Ã¢â€™Â¼' => 'Ã¢â€œâ€“', 'Ã¢â€™Â½' => 'Ã¢â€œâ€”', 'Ã¢â€™Â¾' => 'Ã¢â€œËœ', 'Ã¢â€™Â¿' => 'Ã¢â€œâ„¢', 'Ã¢â€œâ‚¬' => 'Ã¢â€œÅ¡', 'Ã¢â€œï¿½' => 'Ã¢â€œâ€º',
		'Ã¢â€œâ€š' => 'Ã¢â€œÅ“', 'Ã¢â€œÆ’' => 'Ã¢â€œï¿½', 'Ã¢â€œâ€ž' => 'Ã¢â€œÅ¾', 'Ã¢â€œâ€¦' => 'Ã¢â€œÅ¸', 'Ã¢â€œâ€ ' => 'Ã¢â€œÂ ', 'Ã¢â€œâ€¡' => 'Ã¢â€œÂ¡',
		'Ã¢â€œË†' => 'Ã¢â€œÂ¢', 'Ã¢â€œâ€°' => 'Ã¢â€œÂ£', 'Ã¢â€œÅ ' => 'Ã¢â€œÂ¤', 'Ã¢â€œâ€¹' => 'Ã¢â€œÂ¥', 'Ã¢â€œÅ’' => 'Ã¢â€œÂ¦', 'Ã¢â€œï¿½' => 'Ã¢â€œÂ§',
		'Ã¢â€œÅ½' => 'Ã¢â€œÂ¨', 'Ã¢â€œï¿½' => 'Ã¢â€œÂ©'
	);

	/**
	 * All uppercase UTF-8 characters mapped to lowercase characters
	 *
	 * @var array
	 */
	static private $upper_to_lower = array(
		'A' => 'a', 'B' => 'b', 'C' => 'c', 'D' => 'd', 'E' => 'e', 'F' => 'f',
		'G' => 'g', 'H' => 'h', 'I' => 'i', 'J' => 'j', 'K' => 'k', 'L' => 'l',
		'M' => 'm', 'N' => 'n', 'O' => 'o', 'P' => 'p', 'Q' => 'q', 'R' => 'r',
		'S' => 's', 'T' => 't', 'U' => 'u', 'V' => 'v', 'W' => 'w', 'X' => 'x',
		'Y' => 'y', 'Z' => 'z', 'Ãƒâ‚¬' => 'ÃƒÂ ', 'Ãƒï¿½' => 'ÃƒÂ¡', 'Ãƒâ€š' => 'ÃƒÂ¢', 'ÃƒÆ’' => 'ÃƒÂ£',
		'Ãƒâ€ž' => 'ÃƒÂ¤', 'Ãƒâ€¦' => 'ÃƒÂ¥', 'Ãƒâ€ ' => 'ÃƒÂ¦', 'Ãƒâ€¡' => 'ÃƒÂ§', 'ÃƒË†' => 'ÃƒÂ¨', 'Ãƒâ€°' => 'ÃƒÂ©',
		'ÃƒÅ ' => 'ÃƒÂª', 'Ãƒâ€¹' => 'ÃƒÂ«', 'ÃƒÅ’' => 'ÃƒÂ¬', 'Ãƒï¿½' => 'ÃƒÂ­', 'ÃƒÅ½' => 'ÃƒÂ®', 'Ãƒï¿½' => 'ÃƒÂ¯',
		'Ãƒï¿½' => 'ÃƒÂ°', 'Ãƒâ€˜' => 'ÃƒÂ±', 'Ãƒâ€™' => 'ÃƒÂ²', 'Ãƒâ€œ' => 'ÃƒÂ³', 'Ãƒâ€�' => 'ÃƒÂ´', 'Ãƒâ€¢' => 'ÃƒÂµ',
		'Ãƒâ€“' => 'ÃƒÂ¶', 'ÃƒËœ' => 'ÃƒÂ¸', 'Ãƒâ„¢' => 'ÃƒÂ¹', 'ÃƒÅ¡' => 'ÃƒÂº', 'Ãƒâ€º' => 'ÃƒÂ»', 'ÃƒÅ“' => 'ÃƒÂ¼',
		'Ãƒï¿½' => 'ÃƒÂ½', 'ÃƒÅ¾' => 'ÃƒÂ¾', 'Ã„â‚¬' => 'Ã„ï¿½', 'Ã„â€š' => 'Ã„Æ’', 'Ã„â€ž' => 'Ã„â€¦', 'Ã„â€ ' => 'Ã„â€¡',
		'Ã„Ë†' => 'Ã„â€°', 'Ã„Å ' => 'Ã„â€¹', 'Ã„Å’' => 'Ã„ï¿½', 'Ã„Å½' => 'Ã„ï¿½', 'Ã„ï¿½' => 'Ã„â€˜', 'Ã„â€™' => 'Ã„â€œ',
		'Ã„â€�' => 'Ã„â€¢', 'Ã„â€“' => 'Ã„â€”', 'Ã„Ëœ' => 'Ã„â„¢', 'Ã„Å¡' => 'Ã„â€º', 'Ã„Å“' => 'Ã„ï¿½', 'Ã„Å¾' => 'Ã„Å¸',
		'Ã„Â ' => 'Ã„Â¡', 'Ã„Â¢' => 'Ã„Â£', 'Ã„Â¤' => 'Ã„Â¥', 'Ã„Â¦' => 'Ã„Â§', 'Ã„Â¨' => 'Ã„Â©', 'Ã„Âª' => 'Ã„Â«',
		'Ã„Â¬' => 'Ã„Â­', 'Ã„Â®' => 'Ã„Â¯', 'Ã„Â°' => 'i', 'Ã„Â²' => 'Ã„Â³', 'Ã„Â´' => 'Ã„Âµ', 'Ã„Â¶' => 'Ã„Â·',
		'Ã„Â¹' => 'Ã„Âº', 'Ã„Â»' => 'Ã„Â¼', 'Ã„Â½' => 'Ã„Â¾', 'Ã„Â¿' => 'Ã…â‚¬', 'Ã…ï¿½' => 'Ã…â€š', 'Ã…Æ’' => 'Ã…â€ž',
		'Ã…â€¦' => 'Ã…â€ ', 'Ã…â€¡' => 'Ã…Ë†', 'Ã…Å ' => 'Ã…â€¹', 'Ã…Å’' => 'Ã…ï¿½', 'Ã…Å½' => 'Ã…ï¿½', 'Ã…ï¿½' => 'Ã…â€˜',
		'Ã…â€™' => 'Ã…â€œ', 'Ã…â€�' => 'Ã…â€¢', 'Ã…â€“' => 'Ã…â€”', 'Ã…Ëœ' => 'Ã…â„¢', 'Ã…Å¡' => 'Ã…â€º', 'Ã…Å“' => 'Ã…ï¿½',
		'Ã…Å¾' => 'Ã…Å¸', 'Ã…Â ' => 'Ã…Â¡', 'Ã…Â¢' => 'Ã…Â£', 'Ã…Â¤' => 'Ã…Â¥', 'Ã…Â¦' => 'Ã…Â§', 'Ã…Â¨' => 'Ã…Â©',
		'Ã…Âª' => 'Ã…Â«', 'Ã…Â¬' => 'Ã…Â­', 'Ã…Â®' => 'Ã…Â¯', 'Ã…Â°' => 'Ã…Â±', 'Ã…Â²' => 'Ã…Â³', 'Ã…Â´' => 'Ã…Âµ',
		'Ã…Â¶' => 'Ã…Â·', 'Ã…Â¸' => 'ÃƒÂ¿', 'Ã…Â¹' => 'Ã…Âº', 'Ã…Â»' => 'Ã…Â¼', 'Ã…Â½' => 'Ã…Â¾', 'Ã†ï¿½' => 'Ã‰â€œ',
		'Ã†â€š' => 'Ã†Æ’', 'Ã†â€ž' => 'Ã†â€¦', 'Ã†â€ ' => 'Ã‰â€�', 'Ã†â€¡' => 'Ã†Ë†', 'Ã†Å ' => 'Ã‰â€”', 'Ã†â€¹' => 'Ã†Å’',
		'Ã†Å½' => 'Ã‰Ëœ', 'Ã†ï¿½' => 'Ã‰â„¢', 'Ã†ï¿½' => 'Ã‰â€º', 'Ã†â€˜' => 'Ã†â€™', 'Ã†â€œ' => 'Ã‰Â ', 'Ã†â€�' => 'Ã‰Â£',
		'Ã†â€“' => 'Ã‰Â©', 'Ã†â€”' => 'Ã‰Â¨', 'Ã†Ëœ' => 'Ã†â„¢', 'Ã†Å“' => 'Ã‰Â¯', 'Ã†ï¿½' => 'Ã‰Â²', 'Ã†Å¸' => 'Ã‰Âµ',
		'Ã†Â ' => 'Ã†Â¡', 'Ã†Â¢' => 'Ã†Â£', 'Ã†Â¤' => 'Ã†Â¥', 'Ã†Â§' => 'Ã†Â¨', 'Ã†Â©' => 'ÃŠÆ’', 'Ã†Â¬' => 'Ã†Â­',
		'Ã†Â®' => 'ÃŠË†', 'Ã†Â¯' => 'Ã†Â°', 'Ã†Â±' => 'ÃŠÅ ', 'Ã†Â²' => 'ÃŠâ€¹', 'Ã†Â³' => 'Ã†Â´', 'Ã†Âµ' => 'Ã†Â¶',
		'Ã†Â·' => 'ÃŠâ€™', 'Ã†Â¸' => 'Ã†Â¹', 'Ã†Â¼' => 'Ã†Â½', 'Ã‡â€ž' => 'Ã‡â€ ', 'Ã‡â€¦' => 'Ã‡â€ ', 'Ã‡â€¡' => 'Ã‡â€°',
		'Ã‡Ë†' => 'Ã‡â€°', 'Ã‡Å ' => 'Ã‡Å’', 'Ã‡â€¹' => 'Ã‡Å’', 'Ã‡ï¿½' => 'Ã‡Å½', 'Ã‡ï¿½' => 'Ã‡ï¿½', 'Ã‡â€˜' => 'Ã‡â€™',
		'Ã‡â€œ' => 'Ã‡â€�', 'Ã‡â€¢' => 'Ã‡â€“', 'Ã‡â€”' => 'Ã‡Ëœ', 'Ã‡â„¢' => 'Ã‡Å¡', 'Ã‡â€º' => 'Ã‡Å“', 'Ã‡Å¾' => 'Ã‡Å¸',
		'Ã‡Â ' => 'Ã‡Â¡', 'Ã‡Â¢' => 'Ã‡Â£', 'Ã‡Â¤' => 'Ã‡Â¥', 'Ã‡Â¦' => 'Ã‡Â§', 'Ã‡Â¨' => 'Ã‡Â©', 'Ã‡Âª' => 'Ã‡Â«',
		'Ã‡Â¬' => 'Ã‡Â­', 'Ã‡Â®' => 'Ã‡Â¯', 'Ã‡Â±' => 'Ã‡Â³', 'Ã‡Â´' => 'Ã‡Âµ', 'Ã‡Âº' => 'Ã‡Â»', 'Ã‡Â¼' => 'Ã‡Â½',
		'Ã‡Â¾' => 'Ã‡Â¿', 'Ãˆâ‚¬' => 'Ãˆï¿½', 'Ãˆâ€š' => 'ÃˆÆ’', 'Ãˆâ€ž' => 'Ãˆâ€¦', 'Ãˆâ€ ' => 'Ãˆâ€¡', 'ÃˆË†' => 'Ãˆâ€°',
		'ÃˆÅ ' => 'Ãˆâ€¹', 'ÃˆÅ’' => 'Ãˆï¿½', 'ÃˆÅ½' => 'Ãˆï¿½', 'Ãˆï¿½' => 'Ãˆâ€˜', 'Ãˆâ€™' => 'Ãˆâ€œ', 'Ãˆâ€�' => 'Ãˆâ€¢',
		'Ãˆâ€“' => 'Ãˆâ€”', 'ÃŽâ€ ' => 'ÃŽÂ¬', 'ÃŽË†' => 'ÃŽÂ­', 'ÃŽâ€°' => 'ÃŽÂ®', 'ÃŽÅ ' => 'ÃŽÂ¯', 'ÃŽÅ’' => 'Ã�Å’',
		'ÃŽÅ½' => 'Ã�ï¿½', 'ÃŽï¿½' => 'Ã�Å½', 'ÃŽâ€˜' => 'ÃŽÂ±', 'ÃŽâ€™' => 'ÃŽÂ²', 'ÃŽâ€œ' => 'ÃŽÂ³', 'ÃŽâ€�' => 'ÃŽÂ´',
		'ÃŽâ€¢' => 'ÃŽÂµ', 'ÃŽâ€“' => 'ÃŽÂ¶', 'ÃŽâ€”' => 'ÃŽÂ·', 'ÃŽËœ' => 'ÃŽÂ¸', 'ÃŽâ„¢' => 'ÃŽÂ¹', 'ÃŽÅ¡' => 'ÃŽÂº',
		'ÃŽâ€º' => 'ÃŽÂ»', 'ÃŽÅ“' => 'ÃŽÂ¼', 'ÃŽï¿½' => 'ÃŽÂ½', 'ÃŽÅ¾' => 'ÃŽÂ¾', 'ÃŽÅ¸' => 'ÃŽÂ¿', 'ÃŽÂ ' => 'Ã�â‚¬',
		'ÃŽÂ¡' => 'Ã�ï¿½', 'ÃŽÂ£' => 'Ã�Æ’', 'ÃŽÂ¤' => 'Ã�â€ž', 'ÃŽÂ¥' => 'Ã�â€¦', 'ÃŽÂ¦' => 'Ã�â€ ', 'ÃŽÂ§' => 'Ã�â€¡',
		'ÃŽÂ¨' => 'Ã�Ë†', 'ÃŽÂ©' => 'Ã�â€°', 'ÃŽÂª' => 'Ã�Å ', 'ÃŽÂ«' => 'Ã�â€¹', 'Ã�Â¢' => 'Ã�Â£', 'Ã�Â¤' => 'Ã�Â¥',
		'Ã�Â¦' => 'Ã�Â§', 'Ã�Â¨' => 'Ã�Â©', 'Ã�Âª' => 'Ã�Â«', 'Ã�Â¬' => 'Ã�Â­', 'Ã�Â®' => 'Ã�Â¯', 'Ã�ï¿½' => 'Ã‘â€˜',
		'Ã�â€š' => 'Ã‘â€™', 'Ã�Æ’' => 'Ã‘â€œ', 'Ã�â€ž' => 'Ã‘â€�', 'Ã�â€¦' => 'Ã‘â€¢', 'Ã�â€ ' => 'Ã‘â€“', 'Ã�â€¡' => 'Ã‘â€”',
		'Ã�Ë†' => 'Ã‘Ëœ', 'Ã�â€°' => 'Ã‘â„¢', 'Ã�Å ' => 'Ã‘Å¡', 'Ã�â€¹' => 'Ã‘â€º', 'Ã�Å’' => 'Ã‘Å“', 'Ã�Å½' => 'Ã‘Å¾',
		'Ã�ï¿½' => 'Ã‘Å¸', 'Ã�ï¿½' => 'Ã�Â°', 'Ã�â€˜' => 'Ã�Â±', 'Ã�â€™' => 'Ã�Â²', 'Ã�â€œ' => 'Ã�Â³', 'Ã�â€�' => 'Ã�Â´',
		'Ã�â€¢' => 'Ã�Âµ', 'Ã�â€“' => 'Ã�Â¶', 'Ã�â€”' => 'Ã�Â·', 'Ã�Ëœ' => 'Ã�Â¸', 'Ã�â„¢' => 'Ã�Â¹', 'Ã�Å¡' => 'Ã�Âº',
		'Ã�â€º' => 'Ã�Â»', 'Ã�Å“' => 'Ã�Â¼', 'Ã�ï¿½' => 'Ã�Â½', 'Ã�Å¾' => 'Ã�Â¾', 'Ã�Å¸' => 'Ã�Â¿', 'Ã�Â ' => 'Ã‘â‚¬',
		'Ã�Â¡' => 'Ã‘ï¿½', 'Ã�Â¢' => 'Ã‘â€š', 'Ã�Â£' => 'Ã‘Æ’', 'Ã�Â¤' => 'Ã‘â€ž', 'Ã�Â¥' => 'Ã‘â€¦', 'Ã�Â¦' => 'Ã‘â€ ',
		'Ã�Â§' => 'Ã‘â€¡', 'Ã�Â¨' => 'Ã‘Ë†', 'Ã�Â©' => 'Ã‘â€°', 'Ã�Âª' => 'Ã‘Å ', 'Ã�Â«' => 'Ã‘â€¹', 'Ã�Â¬' => 'Ã‘Å’',
		'Ã�Â­' => 'Ã‘ï¿½', 'Ã�Â®' => 'Ã‘Å½', 'Ã�Â¯' => 'Ã‘ï¿½', 'Ã‘Â ' => 'Ã‘Â¡', 'Ã‘Â¢' => 'Ã‘Â£', 'Ã‘Â¤' => 'Ã‘Â¥',
		'Ã‘Â¦' => 'Ã‘Â§', 'Ã‘Â¨' => 'Ã‘Â©', 'Ã‘Âª' => 'Ã‘Â«', 'Ã‘Â¬' => 'Ã‘Â­', 'Ã‘Â®' => 'Ã‘Â¯', 'Ã‘Â°' => 'Ã‘Â±',
		'Ã‘Â²' => 'Ã‘Â³', 'Ã‘Â´' => 'Ã‘Âµ', 'Ã‘Â¶' => 'Ã‘Â·', 'Ã‘Â¸' => 'Ã‘Â¹', 'Ã‘Âº' => 'Ã‘Â»', 'Ã‘Â¼' => 'Ã‘Â½',
		'Ã‘Â¾' => 'Ã‘Â¿', 'Ã’â‚¬' => 'Ã’ï¿½', 'Ã’ï¿½' => 'Ã’â€˜', 'Ã’â€™' => 'Ã’â€œ', 'Ã’â€�' => 'Ã’â€¢', 'Ã’â€“' => 'Ã’â€”',
		'Ã’Ëœ' => 'Ã’â„¢', 'Ã’Å¡' => 'Ã’â€º', 'Ã’Å“' => 'Ã’ï¿½', 'Ã’Å¾' => 'Ã’Å¸', 'Ã’Â ' => 'Ã’Â¡', 'Ã’Â¢' => 'Ã’Â£',
		'Ã’Â¤' => 'Ã’Â¥', 'Ã’Â¦' => 'Ã’Â§', 'Ã’Â¨' => 'Ã’Â©', 'Ã’Âª' => 'Ã’Â«', 'Ã’Â¬' => 'Ã’Â­', 'Ã’Â®' => 'Ã’Â¯',
		'Ã’Â°' => 'Ã’Â±', 'Ã’Â²' => 'Ã’Â³', 'Ã’Â´' => 'Ã’Âµ', 'Ã’Â¶' => 'Ã’Â·', 'Ã’Â¸' => 'Ã’Â¹', 'Ã’Âº' => 'Ã’Â»',
		'Ã’Â¼' => 'Ã’Â½', 'Ã’Â¾' => 'Ã’Â¿', 'Ã“ï¿½' => 'Ã“â€š', 'Ã“Æ’' => 'Ã“â€ž', 'Ã“â€¡' => 'Ã“Ë†', 'Ã“â€¹' => 'Ã“Å’',
		'Ã“ï¿½' => 'Ã“â€˜', 'Ã“â€™' => 'Ã“â€œ', 'Ã“â€�' => 'Ã“â€¢', 'Ã“â€“' => 'Ã“â€”', 'Ã“Ëœ' => 'Ã“â„¢', 'Ã“Å¡' => 'Ã“â€º',
		'Ã“Å“' => 'Ã“ï¿½', 'Ã“Å¾' => 'Ã“Å¸', 'Ã“Â ' => 'Ã“Â¡', 'Ã“Â¢' => 'Ã“Â£', 'Ã“Â¤' => 'Ã“Â¥', 'Ã“Â¦' => 'Ã“Â§',
		'Ã“Â¨' => 'Ã“Â©', 'Ã“Âª' => 'Ã“Â«', 'Ã“Â®' => 'Ã“Â¯', 'Ã“Â°' => 'Ã“Â±', 'Ã“Â²' => 'Ã“Â³', 'Ã“Â´' => 'Ã“Âµ',
		'Ã“Â¸' => 'Ã“Â¹', 'Ã”Â±' => 'Ã•Â¡', 'Ã”Â²' => 'Ã•Â¢', 'Ã”Â³' => 'Ã•Â£', 'Ã”Â´' => 'Ã•Â¤', 'Ã”Âµ' => 'Ã•Â¥',
		'Ã”Â¶' => 'Ã•Â¦', 'Ã”Â·' => 'Ã•Â§', 'Ã”Â¸' => 'Ã•Â¨', 'Ã”Â¹' => 'Ã•Â©', 'Ã”Âº' => 'Ã•Âª', 'Ã”Â»' => 'Ã•Â«',
		'Ã”Â¼' => 'Ã•Â¬', 'Ã”Â½' => 'Ã•Â­', 'Ã”Â¾' => 'Ã•Â®', 'Ã”Â¿' => 'Ã•Â¯', 'Ã•â‚¬' => 'Ã•Â°', 'Ã•ï¿½' => 'Ã•Â±',
		'Ã•â€š' => 'Ã•Â²', 'Ã•Æ’' => 'Ã•Â³', 'Ã•â€ž' => 'Ã•Â´', 'Ã•â€¦' => 'Ã•Âµ', 'Ã•â€ ' => 'Ã•Â¶', 'Ã•â€¡' => 'Ã•Â·',
		'Ã•Ë†' => 'Ã•Â¸', 'Ã•â€°' => 'Ã•Â¹', 'Ã•Å ' => 'Ã•Âº', 'Ã•â€¹' => 'Ã•Â»', 'Ã•Å’' => 'Ã•Â¼', 'Ã•ï¿½' => 'Ã•Â½',
		'Ã•Å½' => 'Ã•Â¾', 'Ã•ï¿½' => 'Ã•Â¿', 'Ã•ï¿½' => 'Ã–â‚¬', 'Ã•â€˜' => 'Ã–ï¿½', 'Ã•â€™' => 'Ã–â€š', 'Ã•â€œ' => 'Ã–Æ’',
		'Ã•â€�' => 'Ã–â€ž', 'Ã•â€¢' => 'Ã–â€¦', 'Ã•â€“' => 'Ã–â€ ', 'Ã¡â€šÂ ' => 'Ã¡Æ’ï¿½', 'Ã¡â€šÂ¡' => 'Ã¡Æ’â€˜', 'Ã¡â€šÂ¢' => 'Ã¡Æ’â€™',
		'Ã¡â€šÂ£' => 'Ã¡Æ’â€œ', 'Ã¡â€šÂ¤' => 'Ã¡Æ’â€�', 'Ã¡â€šÂ¥' => 'Ã¡Æ’â€¢', 'Ã¡â€šÂ¦' => 'Ã¡Æ’â€“', 'Ã¡â€šÂ§' => 'Ã¡Æ’â€”', 'Ã¡â€šÂ¨' => 'Ã¡Æ’Ëœ',
		'Ã¡â€šÂ©' => 'Ã¡Æ’â„¢', 'Ã¡â€šÂª' => 'Ã¡Æ’Å¡', 'Ã¡â€šÂ«' => 'Ã¡Æ’â€º', 'Ã¡â€šÂ¬' => 'Ã¡Æ’Å“', 'Ã¡â€šÂ­' => 'Ã¡Æ’ï¿½', 'Ã¡â€šÂ®' => 'Ã¡Æ’Å¾',
		'Ã¡â€šÂ¯' => 'Ã¡Æ’Å¸', 'Ã¡â€šÂ°' => 'Ã¡Æ’Â ', 'Ã¡â€šÂ±' => 'Ã¡Æ’Â¡', 'Ã¡â€šÂ²' => 'Ã¡Æ’Â¢', 'Ã¡â€šÂ³' => 'Ã¡Æ’Â£', 'Ã¡â€šÂ´' => 'Ã¡Æ’Â¤',
		'Ã¡â€šÂµ' => 'Ã¡Æ’Â¥', 'Ã¡â€šÂ¶' => 'Ã¡Æ’Â¦', 'Ã¡â€šÂ·' => 'Ã¡Æ’Â§', 'Ã¡â€šÂ¸' => 'Ã¡Æ’Â¨', 'Ã¡â€šÂ¹' => 'Ã¡Æ’Â©', 'Ã¡â€šÂº' => 'Ã¡Æ’Âª',
		'Ã¡â€šÂ»' => 'Ã¡Æ’Â«', 'Ã¡â€šÂ¼' => 'Ã¡Æ’Â¬', 'Ã¡â€šÂ½' => 'Ã¡Æ’Â­', 'Ã¡â€šÂ¾' => 'Ã¡Æ’Â®', 'Ã¡â€šÂ¿' => 'Ã¡Æ’Â¯', 'Ã¡Æ’â‚¬' => 'Ã¡Æ’Â°',
		'Ã¡Æ’ï¿½' => 'Ã¡Æ’Â±', 'Ã¡Æ’â€š' => 'Ã¡Æ’Â²', 'Ã¡Æ’Æ’' => 'Ã¡Æ’Â³', 'Ã¡Æ’â€ž' => 'Ã¡Æ’Â´', 'Ã¡Æ’â€¦' => 'Ã¡Æ’Âµ', 'Ã¡Â¸â‚¬' => 'Ã¡Â¸ï¿½',
		'Ã¡Â¸â€š' => 'Ã¡Â¸Æ’', 'Ã¡Â¸â€ž' => 'Ã¡Â¸â€¦', 'Ã¡Â¸â€ ' => 'Ã¡Â¸â€¡', 'Ã¡Â¸Ë†' => 'Ã¡Â¸â€°', 'Ã¡Â¸Å ' => 'Ã¡Â¸â€¹', 'Ã¡Â¸Å’' => 'Ã¡Â¸ï¿½',
		'Ã¡Â¸Å½' => 'Ã¡Â¸ï¿½', 'Ã¡Â¸ï¿½' => 'Ã¡Â¸â€˜', 'Ã¡Â¸â€™' => 'Ã¡Â¸â€œ', 'Ã¡Â¸â€�' => 'Ã¡Â¸â€¢', 'Ã¡Â¸â€“' => 'Ã¡Â¸â€”', 'Ã¡Â¸Ëœ' => 'Ã¡Â¸â„¢',
		'Ã¡Â¸Å¡' => 'Ã¡Â¸â€º', 'Ã¡Â¸Å“' => 'Ã¡Â¸ï¿½', 'Ã¡Â¸Å¾' => 'Ã¡Â¸Å¸', 'Ã¡Â¸Â ' => 'Ã¡Â¸Â¡', 'Ã¡Â¸Â¢' => 'Ã¡Â¸Â£', 'Ã¡Â¸Â¤' => 'Ã¡Â¸Â¥',
		'Ã¡Â¸Â¦' => 'Ã¡Â¸Â§', 'Ã¡Â¸Â¨' => 'Ã¡Â¸Â©', 'Ã¡Â¸Âª' => 'Ã¡Â¸Â«', 'Ã¡Â¸Â¬' => 'Ã¡Â¸Â­', 'Ã¡Â¸Â®' => 'Ã¡Â¸Â¯', 'Ã¡Â¸Â°' => 'Ã¡Â¸Â±',
		'Ã¡Â¸Â²' => 'Ã¡Â¸Â³', 'Ã¡Â¸Â´' => 'Ã¡Â¸Âµ', 'Ã¡Â¸Â¶' => 'Ã¡Â¸Â·', 'Ã¡Â¸Â¸' => 'Ã¡Â¸Â¹', 'Ã¡Â¸Âº' => 'Ã¡Â¸Â»', 'Ã¡Â¸Â¼' => 'Ã¡Â¸Â½',
		'Ã¡Â¸Â¾' => 'Ã¡Â¸Â¿', 'Ã¡Â¹â‚¬' => 'Ã¡Â¹ï¿½', 'Ã¡Â¹â€š' => 'Ã¡Â¹Æ’', 'Ã¡Â¹â€ž' => 'Ã¡Â¹â€¦', 'Ã¡Â¹â€ ' => 'Ã¡Â¹â€¡', 'Ã¡Â¹Ë†' => 'Ã¡Â¹â€°',
		'Ã¡Â¹Å ' => 'Ã¡Â¹â€¹', 'Ã¡Â¹Å’' => 'Ã¡Â¹ï¿½', 'Ã¡Â¹Å½' => 'Ã¡Â¹ï¿½', 'Ã¡Â¹ï¿½' => 'Ã¡Â¹â€˜', 'Ã¡Â¹â€™' => 'Ã¡Â¹â€œ', 'Ã¡Â¹â€�' => 'Ã¡Â¹â€¢',
		'Ã¡Â¹â€“' => 'Ã¡Â¹â€”', 'Ã¡Â¹Ëœ' => 'Ã¡Â¹â„¢', 'Ã¡Â¹Å¡' => 'Ã¡Â¹â€º', 'Ã¡Â¹Å“' => 'Ã¡Â¹ï¿½', 'Ã¡Â¹Å¾' => 'Ã¡Â¹Å¸', 'Ã¡Â¹Â ' => 'Ã¡Â¹Â¡',
		'Ã¡Â¹Â¢' => 'Ã¡Â¹Â£', 'Ã¡Â¹Â¤' => 'Ã¡Â¹Â¥', 'Ã¡Â¹Â¦' => 'Ã¡Â¹Â§', 'Ã¡Â¹Â¨' => 'Ã¡Â¹Â©', 'Ã¡Â¹Âª' => 'Ã¡Â¹Â«', 'Ã¡Â¹Â¬' => 'Ã¡Â¹Â­',
		'Ã¡Â¹Â®' => 'Ã¡Â¹Â¯', 'Ã¡Â¹Â°' => 'Ã¡Â¹Â±', 'Ã¡Â¹Â²' => 'Ã¡Â¹Â³', 'Ã¡Â¹Â´' => 'Ã¡Â¹Âµ', 'Ã¡Â¹Â¶' => 'Ã¡Â¹Â·', 'Ã¡Â¹Â¸' => 'Ã¡Â¹Â¹',
		'Ã¡Â¹Âº' => 'Ã¡Â¹Â»', 'Ã¡Â¹Â¼' => 'Ã¡Â¹Â½', 'Ã¡Â¹Â¾' => 'Ã¡Â¹Â¿', 'Ã¡Âºâ‚¬' => 'Ã¡Âºï¿½', 'Ã¡Âºâ€š' => 'Ã¡ÂºÆ’', 'Ã¡Âºâ€ž' => 'Ã¡Âºâ€¦',
		'Ã¡Âºâ€ ' => 'Ã¡Âºâ€¡', 'Ã¡ÂºË†' => 'Ã¡Âºâ€°', 'Ã¡ÂºÅ ' => 'Ã¡Âºâ€¹', 'Ã¡ÂºÅ’' => 'Ã¡Âºï¿½', 'Ã¡ÂºÅ½' => 'Ã¡Âºï¿½', 'Ã¡Âºï¿½' => 'Ã¡Âºâ€˜',
		'Ã¡Âºâ€™' => 'Ã¡Âºâ€œ', 'Ã¡Âºâ€�' => 'Ã¡Âºâ€¢', 'Ã¡ÂºÂ ' => 'Ã¡ÂºÂ¡', 'Ã¡ÂºÂ¢' => 'Ã¡ÂºÂ£', 'Ã¡ÂºÂ¤' => 'Ã¡ÂºÂ¥', 'Ã¡ÂºÂ¦' => 'Ã¡ÂºÂ§',
		'Ã¡ÂºÂ¨' => 'Ã¡ÂºÂ©', 'Ã¡ÂºÂª' => 'Ã¡ÂºÂ«', 'Ã¡ÂºÂ¬' => 'Ã¡ÂºÂ­', 'Ã¡ÂºÂ®' => 'Ã¡ÂºÂ¯', 'Ã¡ÂºÂ°' => 'Ã¡ÂºÂ±', 'Ã¡ÂºÂ²' => 'Ã¡ÂºÂ³',
		'Ã¡ÂºÂ´' => 'Ã¡ÂºÂµ', 'Ã¡ÂºÂ¶' => 'Ã¡ÂºÂ·', 'Ã¡ÂºÂ¸' => 'Ã¡ÂºÂ¹', 'Ã¡ÂºÂº' => 'Ã¡ÂºÂ»', 'Ã¡ÂºÂ¼' => 'Ã¡ÂºÂ½', 'Ã¡ÂºÂ¾' => 'Ã¡ÂºÂ¿',
		'Ã¡Â»â‚¬' => 'Ã¡Â»ï¿½', 'Ã¡Â»â€š' => 'Ã¡Â»Æ’', 'Ã¡Â»â€ž' => 'Ã¡Â»â€¦', 'Ã¡Â»â€ ' => 'Ã¡Â»â€¡', 'Ã¡Â»Ë†' => 'Ã¡Â»â€°', 'Ã¡Â»Å ' => 'Ã¡Â»â€¹',
		'Ã¡Â»Å’' => 'Ã¡Â»ï¿½', 'Ã¡Â»Å½' => 'Ã¡Â»ï¿½', 'Ã¡Â»ï¿½' => 'Ã¡Â»â€˜', 'Ã¡Â»â€™' => 'Ã¡Â»â€œ', 'Ã¡Â»â€�' => 'Ã¡Â»â€¢', 'Ã¡Â»â€“' => 'Ã¡Â»â€”',
		'Ã¡Â»Ëœ' => 'Ã¡Â»â„¢', 'Ã¡Â»Å¡' => 'Ã¡Â»â€º', 'Ã¡Â»Å“' => 'Ã¡Â»ï¿½', 'Ã¡Â»Å¾' => 'Ã¡Â»Å¸', 'Ã¡Â»Â ' => 'Ã¡Â»Â¡', 'Ã¡Â»Â¢' => 'Ã¡Â»Â£',
		'Ã¡Â»Â¤' => 'Ã¡Â»Â¥', 'Ã¡Â»Â¦' => 'Ã¡Â»Â§', 'Ã¡Â»Â¨' => 'Ã¡Â»Â©', 'Ã¡Â»Âª' => 'Ã¡Â»Â«', 'Ã¡Â»Â¬' => 'Ã¡Â»Â­', 'Ã¡Â»Â®' => 'Ã¡Â»Â¯',
		'Ã¡Â»Â°' => 'Ã¡Â»Â±', 'Ã¡Â»Â²' => 'Ã¡Â»Â³', 'Ã¡Â»Â´' => 'Ã¡Â»Âµ', 'Ã¡Â»Â¶' => 'Ã¡Â»Â·', 'Ã¡Â»Â¸' => 'Ã¡Â»Â¹', 'Ã¡Â¼Ë†' => 'Ã¡Â¼â‚¬',
		'Ã¡Â¼â€°' => 'Ã¡Â¼ï¿½', 'Ã¡Â¼Å ' => 'Ã¡Â¼â€š', 'Ã¡Â¼â€¹' => 'Ã¡Â¼Æ’', 'Ã¡Â¼Å’' => 'Ã¡Â¼â€ž', 'Ã¡Â¼ï¿½' => 'Ã¡Â¼â€¦', 'Ã¡Â¼Å½' => 'Ã¡Â¼â€ ',
		'Ã¡Â¼ï¿½' => 'Ã¡Â¼â€¡', 'Ã¡Â¼Ëœ' => 'Ã¡Â¼ï¿½', 'Ã¡Â¼â„¢' => 'Ã¡Â¼â€˜', 'Ã¡Â¼Å¡' => 'Ã¡Â¼â€™', 'Ã¡Â¼â€º' => 'Ã¡Â¼â€œ', 'Ã¡Â¼Å“' => 'Ã¡Â¼â€�',
		'Ã¡Â¼ï¿½' => 'Ã¡Â¼â€¢', 'Ã¡Â¼Â¨' => 'Ã¡Â¼Â ', 'Ã¡Â¼Â©' => 'Ã¡Â¼Â¡', 'Ã¡Â¼Âª' => 'Ã¡Â¼Â¢', 'Ã¡Â¼Â«' => 'Ã¡Â¼Â£', 'Ã¡Â¼Â¬' => 'Ã¡Â¼Â¤',
		'Ã¡Â¼Â­' => 'Ã¡Â¼Â¥', 'Ã¡Â¼Â®' => 'Ã¡Â¼Â¦', 'Ã¡Â¼Â¯' => 'Ã¡Â¼Â§', 'Ã¡Â¼Â¸' => 'Ã¡Â¼Â°', 'Ã¡Â¼Â¹' => 'Ã¡Â¼Â±', 'Ã¡Â¼Âº' => 'Ã¡Â¼Â²',
		'Ã¡Â¼Â»' => 'Ã¡Â¼Â³', 'Ã¡Â¼Â¼' => 'Ã¡Â¼Â´', 'Ã¡Â¼Â½' => 'Ã¡Â¼Âµ', 'Ã¡Â¼Â¾' => 'Ã¡Â¼Â¶', 'Ã¡Â¼Â¿' => 'Ã¡Â¼Â·', 'Ã¡Â½Ë†' => 'Ã¡Â½â‚¬',
		'Ã¡Â½â€°' => 'Ã¡Â½ï¿½', 'Ã¡Â½Å ' => 'Ã¡Â½â€š', 'Ã¡Â½â€¹' => 'Ã¡Â½Æ’', 'Ã¡Â½Å’' => 'Ã¡Â½â€ž', 'Ã¡Â½ï¿½' => 'Ã¡Â½â€¦', 'Ã¡Â½â„¢' => 'Ã¡Â½â€˜',
		'Ã¡Â½â€º' => 'Ã¡Â½â€œ', 'Ã¡Â½ï¿½' => 'Ã¡Â½â€¢', 'Ã¡Â½Å¸' => 'Ã¡Â½â€”', 'Ã¡Â½Â¨' => 'Ã¡Â½Â ', 'Ã¡Â½Â©' => 'Ã¡Â½Â¡', 'Ã¡Â½Âª' => 'Ã¡Â½Â¢',
		'Ã¡Â½Â«' => 'Ã¡Â½Â£', 'Ã¡Â½Â¬' => 'Ã¡Â½Â¤', 'Ã¡Â½Â­' => 'Ã¡Â½Â¥', 'Ã¡Â½Â®' => 'Ã¡Â½Â¦', 'Ã¡Â½Â¯' => 'Ã¡Â½Â§', 'Ã¡Â¾Ë†' => 'Ã¡Â¾â‚¬',
		'Ã¡Â¾â€°' => 'Ã¡Â¾ï¿½', 'Ã¡Â¾Å ' => 'Ã¡Â¾â€š', 'Ã¡Â¾â€¹' => 'Ã¡Â¾Æ’', 'Ã¡Â¾Å’' => 'Ã¡Â¾â€ž', 'Ã¡Â¾ï¿½' => 'Ã¡Â¾â€¦', 'Ã¡Â¾Å½' => 'Ã¡Â¾â€ ',
		'Ã¡Â¾ï¿½' => 'Ã¡Â¾â€¡', 'Ã¡Â¾Ëœ' => 'Ã¡Â¾ï¿½', 'Ã¡Â¾â„¢' => 'Ã¡Â¾â€˜', 'Ã¡Â¾Å¡' => 'Ã¡Â¾â€™', 'Ã¡Â¾â€º' => 'Ã¡Â¾â€œ', 'Ã¡Â¾Å“' => 'Ã¡Â¾â€�',
		'Ã¡Â¾ï¿½' => 'Ã¡Â¾â€¢', 'Ã¡Â¾Å¾' => 'Ã¡Â¾â€“', 'Ã¡Â¾Å¸' => 'Ã¡Â¾â€”', 'Ã¡Â¾Â¨' => 'Ã¡Â¾Â ', 'Ã¡Â¾Â©' => 'Ã¡Â¾Â¡', 'Ã¡Â¾Âª' => 'Ã¡Â¾Â¢',
		'Ã¡Â¾Â«' => 'Ã¡Â¾Â£', 'Ã¡Â¾Â¬' => 'Ã¡Â¾Â¤', 'Ã¡Â¾Â­' => 'Ã¡Â¾Â¥', 'Ã¡Â¾Â®' => 'Ã¡Â¾Â¦', 'Ã¡Â¾Â¯' => 'Ã¡Â¾Â§', 'Ã¡Â¾Â¸' => 'Ã¡Â¾Â°',
		'Ã¡Â¾Â¹' => 'Ã¡Â¾Â±', 'Ã¡Â¿Ëœ' => 'Ã¡Â¿ï¿½', 'Ã¡Â¿â„¢' => 'Ã¡Â¿â€˜', 'Ã¡Â¿Â¨' => 'Ã¡Â¿Â ', 'Ã¡Â¿Â©' => 'Ã¡Â¿Â¡', 'Ã¢â€™Â¶' => 'Ã¢â€œï¿½',
		'Ã¢â€™Â·' => 'Ã¢â€œâ€˜', 'Ã¢â€™Â¸' => 'Ã¢â€œâ€™', 'Ã¢â€™Â¹' => 'Ã¢â€œâ€œ', 'Ã¢â€™Âº' => 'Ã¢â€œâ€�', 'Ã¢â€™Â»' => 'Ã¢â€œâ€¢', 'Ã¢â€™Â¼' => 'Ã¢â€œâ€“',
		'Ã¢â€™Â½' => 'Ã¢â€œâ€”', 'Ã¢â€™Â¾' => 'Ã¢â€œËœ', 'Ã¢â€™Â¿' => 'Ã¢â€œâ„¢', 'Ã¢â€œâ‚¬' => 'Ã¢â€œÅ¡', 'Ã¢â€œï¿½' => 'Ã¢â€œâ€º', 'Ã¢â€œâ€š' => 'Ã¢â€œÅ“',
		'Ã¢â€œÆ’' => 'Ã¢â€œï¿½', 'Ã¢â€œâ€ž' => 'Ã¢â€œÅ¾', 'Ã¢â€œâ€¦' => 'Ã¢â€œÅ¸', 'Ã¢â€œâ€ ' => 'Ã¢â€œÂ ', 'Ã¢â€œâ€¡' => 'Ã¢â€œÂ¡', 'Ã¢â€œË†' => 'Ã¢â€œÂ¢',
		'Ã¢â€œâ€°' => 'Ã¢â€œÂ£', 'Ã¢â€œÅ ' => 'Ã¢â€œÂ¤', 'Ã¢â€œâ€¹' => 'Ã¢â€œÂ¥', 'Ã¢â€œÅ’' => 'Ã¢â€œÂ¦', 'Ã¢â€œï¿½' => 'Ã¢â€œÂ§', 'Ã¢â€œÅ½' => 'Ã¢â€œÂ¨',
		'Ã¢â€œï¿½' => 'Ã¢â€œÂ©', 'Ã¯Â¼Â¡' => 'Ã¯Â½ï¿½', 'Ã¯Â¼Â¢' => 'Ã¯Â½â€š', 'Ã¯Â¼Â£' => 'Ã¯Â½Æ’', 'Ã¯Â¼Â¤' => 'Ã¯Â½â€ž', 'Ã¯Â¼Â¥' => 'Ã¯Â½â€¦',
		'Ã¯Â¼Â¦' => 'Ã¯Â½â€ ', 'Ã¯Â¼Â§' => 'Ã¯Â½â€¡', 'Ã¯Â¼Â¨' => 'Ã¯Â½Ë†', 'Ã¯Â¼Â©' => 'Ã¯Â½â€°', 'Ã¯Â¼Âª' => 'Ã¯Â½Å ', 'Ã¯Â¼Â«' => 'Ã¯Â½â€¹',
		'Ã¯Â¼Â¬' => 'Ã¯Â½Å’', 'Ã¯Â¼Â­' => 'Ã¯Â½ï¿½', 'Ã¯Â¼Â®' => 'Ã¯Â½Å½', 'Ã¯Â¼Â¯' => 'Ã¯Â½ï¿½', 'Ã¯Â¼Â°' => 'Ã¯Â½ï¿½', 'Ã¯Â¼Â±' => 'Ã¯Â½â€˜',
		'Ã¯Â¼Â²' => 'Ã¯Â½â€™', 'Ã¯Â¼Â³' => 'Ã¯Â½â€œ', 'Ã¯Â¼Â´' => 'Ã¯Â½â€�', 'Ã¯Â¼Âµ' => 'Ã¯Â½â€¢', 'Ã¯Â¼Â¶' => 'Ã¯Â½â€“', 'Ã¯Â¼Â·' => 'Ã¯Â½â€”',
		'Ã¯Â¼Â¸' => 'Ã¯Â½Ëœ', 'Ã¯Â¼Â¹' => 'Ã¯Â½â„¢', 'Ã¯Â¼Âº' => 'Ã¯Â½Å¡'
	);

	/**
	 * A mapping of all ASCII-based latin characters, puntuation, symbols and number forms to ASCII.
	 *
	 * Includes elements form the following unicode blocks:
	 *
	 *  - Latin-1 Supplement
	 *  - Latin Extended-A
	 *  - Latin Extended-B
	 *  - IPA Extensions
	 *  - Latin Extended Additional
	 *  - General Punctuation
	 *  - Letterlike symbols
	 *  - Number Forms
	 *
	 * @var array
	 */
	static private $utf8_to_ascii = array(
		// Latin-1 Supplement
		'Ã‚Â©' => '(c)', 'Ã‚Â«' => '<<',  'Ã‚Â®' => '(R)', 'Ã‚Â»' => '>>',  'Ã‚Â¼' => '1/4',
		'Ã‚Â½' => '1/2', 'Ã‚Â¾' => '3/4', 'Ãƒâ‚¬' => 'A',   'Ãƒï¿½' => 'A',   'Ãƒâ€š' => 'A',
		'ÃƒÆ’' => 'A',   'Ãƒâ€ž' => 'A',   'Ãƒâ€¦' => 'A',   'Ãƒâ€ ' => 'AE',  'Ãƒâ€¡' => 'C',
		'ÃƒË†' => 'E',   'Ãƒâ€°' => 'E',   'ÃƒÅ ' => 'E',   'Ãƒâ€¹' => 'E',   'ÃƒÅ’' => 'I',
		'Ãƒï¿½' => 'I',   'ÃƒÅ½' => 'I',   'Ãƒï¿½' => 'I',   'Ãƒâ€˜' => 'N',   'Ãƒâ€™' => 'O',
		'Ãƒâ€œ' => 'O',   'Ãƒâ€�' => 'O',   'Ãƒâ€¢' => 'O',   'Ãƒâ€“' => 'O',   'ÃƒËœ' => 'O',
		'Ãƒâ„¢' => 'U',   'ÃƒÅ¡' => 'U',   'Ãƒâ€º' => 'U',   'ÃƒÅ“' => 'U',   'Ãƒï¿½' => 'Y',
		'ÃƒÂ ' => 'a',   'ÃƒÂ¡' => 'a',   'ÃƒÂ¢' => 'a',   'ÃƒÂ£' => 'a',   'ÃƒÂ¤' => 'a',
		'ÃƒÂ¥' => 'a',   'ÃƒÂ¦' => 'ae',  'ÃƒÂ§' => 'c',   'ÃƒÂ¨' => 'e',   'ÃƒÂ©' => 'e',
		'ÃƒÂª' => 'e',   'ÃƒÂ«' => 'e',   'ÃƒÂ¬' => 'i',   'ÃƒÂ­' => 'i',   'ÃƒÂ®' => 'i',
		'ÃƒÂ¯' => 'i',   'ÃƒÂ±' => 'n',   'ÃƒÂ²' => 'o',   'ÃƒÂ³' => 'o',   'ÃƒÂ´' => 'o',
		'ÃƒÂµ' => 'o',   'ÃƒÂ¶' => 'o',   'ÃƒÂ¸' => 'o',   'ÃƒÂ¹' => 'u',   'ÃƒÂº' => 'u',
		'ÃƒÂ»' => 'u',   'ÃƒÂ¼' => 'u',   'ÃƒÂ½' => 'y',   'ÃƒÂ¿' => 'y',
		// Latin Extended-A
		'Ã„â‚¬' => 'A',   'Ã„ï¿½' => 'a',   'Ã„â€š' => 'A',   'Ã„Æ’' => 'a',   'Ã„â€ž' => 'A',
		'Ã„â€¦' => 'a',   'Ã„â€ ' => 'C',   'Ã„â€¡' => 'c',   'Ã„Ë†' => 'C',   'Ã„â€°' => 'c',
		'Ã„Å ' => 'C',   'Ã„â€¹' => 'c',   'Ã„Å’' => 'C',   'Ã„ï¿½' => 'c',   'Ã„Å½' => 'D',
		'Ã„ï¿½' => 'd',   'Ã„ï¿½' => 'D',   'Ã„â€˜' => 'd',   'Ã„â€™' => 'E',   'Ã„â€œ' => 'e',
		'Ã„â€�' => 'E',   'Ã„â€¢' => 'e',   'Ã„â€“' => 'E',   'Ã„â€”' => 'e',   'Ã„Ëœ' => 'E',
		'Ã„â„¢' => 'e',   'Ã„Å¡' => 'E',   'Ã„â€º' => 'e',   'Ã„Å“' => 'G',   'Ã„ï¿½' => 'g',
		'Ã„Å¾' => 'G',   'Ã„Å¸' => 'g',   'Ã„Â ' => 'G',   'Ã„Â¡' => 'g',   'Ã„Â¢' => 'G',
		'Ã„Â£' => 'g',   'Ã„Â¤' => 'H',   'Ã„Â¥' => 'h',   'Ã„Â¦' => 'H',   'Ã„Â§' => 'h',
		'Ã„Â¨' => 'I',   'Ã„Â©' => 'i',   'Ã„Âª' => 'I',   'Ã„Â«' => 'i',   'Ã„Â¬' => 'I',
		'Ã„Â­' => 'i',   'Ã„Â®' => 'I',   'Ã„Â¯' => 'i',   'Ã„Â°' => 'I',   'Ã„Â±' => 'i',
		'Ã„Â²' => 'IJ',  'Ã„Â³' => 'ij',  'Ã„Â´' => 'J',   'Ã„Âµ' => 'j',   'Ã„Â¶' => 'K',
		'Ã„Â·' => 'k',   'Ã„Â¹' => 'L',   'Ã„Âº' => 'l',   'Ã„Â»' => 'L',   'Ã„Â¼' => 'l',
		'Ã„Â½' => 'L',   'Ã„Â¾' => 'l',   'Ã„Â¿' => 'L',   'Ã…â‚¬' => 'l',   'Ã…ï¿½' => 'L',
		'Ã…â€š' => 'l',   'Ã…Æ’' => 'N',   'Ã…â€ž' => 'n',   'Ã…â€¦' => 'N',   'Ã…â€ ' => 'n',
		'Ã…â€¡' => 'N',   'Ã…Ë†' => 'n',   'Ã…â€°' => "'n", 'Ã…Å ' => 'N',   'Ã…â€¹' => 'n',
		'Ã…Å’' => 'O',   'Ã…ï¿½' => 'o',   'Ã…Å½' => 'O',   'Ã…ï¿½' => 'o',   'Ã…ï¿½' => 'O',
		'Ã…â€˜' => 'o',   'Ã…â€™' => 'OE',  'Ã…â€œ' => 'oe',  'Ã…â€�' => 'R',   'Ã…â€¢' => 'r',
		'Ã…â€“' => 'R',   'Ã…â€”' => 'r',   'Ã…Ëœ' => 'R',   'Ã…â„¢' => 'r',   'Ã…Å¡' => 'S',
		'Ã…â€º' => 's',   'Ã…Å“' => 'S',   'Ã…ï¿½' => 's',   'Ã…Å¾' => 'S',   'Ã…Å¸' => 's',
		'Ã…Â ' => 'S',   'Ã…Â¡' => 's',   'Ã…Â¢' => 'T',   'Ã…Â£' => 't',   'Ã…Â¤' => 'T',
		'Ã…Â¥' => 't',   'Ã…Â¦' => 'T',   'Ã…Â§' => 't',   'Ã…Â¨' => 'U',   'Ã…Â©' => 'u',
		'Ã…Âª' => 'U',   'Ã…Â«' => 'u',   'Ã…Â¬' => 'U',   'Ã…Â­' => 'u',   'Ã…Â®' => 'U',
		'Ã…Â¯' => 'u',   'Ã…Â°' => 'U',   'Ã…Â±' => 'u',   'Ã…Â²' => 'U',   'Ã…Â³' => 'u',
		'Ã…Â´' => 'W',   'Ã…Âµ' => 'w',   'Ã…Â¶' => 'Y',   'Ã…Â·' => 'y',   'Ã…Â¸' => 'Y',
		'Ã…Â¹' => 'Z',   'Ã…Âº' => 'z',   'Ã…Â»' => 'Z',   'Ã…Â¼' => 'z',   'Ã…Â½' => 'Z',
		'Ã…Â¾' => 'z',
		// Latin Extended-B
		'Ã†â‚¬' => 'b',   'Ã†ï¿½' => 'B',   'Ã†â€š' => 'B',   'Ã†Æ’' => 'b',   'Ã†â€ ' => 'O',
		'Ã†â€¡' => 'C',   'Ã†Ë†' => 'c',   'Ã†â€°' => 'D',   'Ã†Å ' => 'D',   'Ã†â€¹' => 'D',
		'Ã†Å’' => 'd',   'Ã†Å½' => 'E',   'Ã†ï¿½' => 'E',   'Ã†â€˜' => 'F',   'Ã†â€™' => 'f',
		'Ã†â€œ' => 'G',   'Ã†â€”' => 'I',   'Ã†Ëœ' => 'K',   'Ã†â„¢' => 'k',   'Ã†Å¡' => 'l',
		'Ã†Å“' => 'M',   'Ã†ï¿½' => 'N',   'Ã†Å¾' => 'n',   'Ã†Å¸' => 'O',   'Ã†Â ' => 'O',
		'Ã†Â¡' => 'o',   'Ã†Â¢' => 'OI',  'Ã†Â£' => 'oi',  'Ã†Â¤' => 'P',   'Ã†Â¥' => 'p',
		'Ã†Â«' => 't',   'Ã†Â¬' => 'T',   'Ã†Â­' => 't',   'Ã†Â®' => 'T',   'Ã†Â¯' => 'U',
		'Ã†Â°' => 'u',   'Ã†Â²' => 'V',   'Ã†Â³' => 'Y',   'Ã†Â´' => 'y',   'Ã†Âµ' => 'Z',
		'Ã†Â¶' => 'z',   'Ã†Â»' => '2',   'Ã‡â€ž' => 'DZ',  'Ã‡â€¦' => 'Dz',  'Ã‡â€ ' => 'dz',
		'Ã‡â€¡' => 'LJ',  'Ã‡Ë†' => 'Lj',  'Ã‡â€°' => 'lj',  'Ã‡Å ' => 'Nj',  'Ã‡â€¹' => 'Nj',
		'Ã‡Å’' => 'nj',  'Ã‡ï¿½' => 'A',   'Ã‡Å½' => 'a',   'Ã‡ï¿½' => 'I',   'Ã‡ï¿½' => 'i',
		'Ã‡â€˜' => 'O',   'Ã‡â€™' => 'o',   'Ã‡â€œ' => 'U',   'Ã‡â€�' => 'u',   'Ã‡â€¢' => 'U',
		'Ã‡â€“' => 'u',   'Ã‡â€”' => 'U',   'Ã‡Ëœ' => 'u',   'Ã‡â„¢' => 'U',   'Ã‡Å¡' => 'u',
		'Ã‡â€º' => 'U',   'Ã‡Å“' => 'u',   'Ã‡ï¿½' => 'e',   'Ã‡Å¾' => 'A',   'Ã‡Å¸' => 'a',
		'Ã‡Â ' => 'A',   'Ã‡Â¡' => 'a',   'Ã‡Â¢' => 'AE',  'Ã‡Â£' => 'ae',  'Ã‡Â¤' => 'G',
		'Ã‡Â¥' => 'g',   'Ã‡Â¦' => 'G',   'Ã‡Â§' => 'g',   'Ã‡Â¨' => 'K',   'Ã‡Â©' => 'k',
		'Ã‡Âª' => 'O',   'Ã‡Â«' => 'o',   'Ã‡Â¬' => 'O',   'Ã‡Â­' => 'o',   'Ã‡Â°' => 'j',
		'Ã‡Â±' => 'DZ',  'Ã‡Â²' => 'Dz',  'Ã‡Â³' => 'dz',  'Ã‡Â´' => 'G',   'Ã‡Âµ' => 'g',
		'Ã‡Â¸' => 'N',   'Ã‡Â¹' => 'n',   'Ã‡Âº' => 'A',   'Ã‡Â»' => 'a',   'Ã‡Â¼' => 'AE',
		'Ã‡Â½' => 'ae',  'Ã‡Â¾' => 'O',   'Ã‡Â¿' => 'o',   'Ãˆâ‚¬' => 'A',   'Ãˆï¿½' => 'a',
		'Ãˆâ€š' => 'A',   'ÃˆÆ’' => 'a',   'Ãˆâ€ž' => 'E',   'Ãˆâ€¦' => 'e',   'Ãˆâ€ ' => 'E',
		'Ãˆâ€¡' => 'e',   'ÃˆË†' => 'I',   'Ãˆâ€°' => 'i',   'ÃˆÅ ' => 'I',   'Ãˆâ€¹' => 'i',
		'ÃˆÅ’' => 'O',   'Ãˆï¿½' => 'o',   'ÃˆÅ½' => 'O',   'Ãˆï¿½' => 'o',   'Ãˆï¿½' => 'R',
		'Ãˆâ€˜' => 'r',   'Ãˆâ€™' => 'R',   'Ãˆâ€œ' => 'r',   'Ãˆâ€�' => 'U',   'Ãˆâ€¢' => 'u',
		'Ãˆâ€“' => 'U',   'Ãˆâ€”' => 'u',   'ÃˆËœ' => 'S',   'Ãˆâ„¢' => 's',   'ÃˆÅ¡' => 'T',
		'Ãˆâ€º' => 't',   'ÃˆÅ¾' => 'H',   'ÃˆÅ¸' => 'h',   'ÃˆÂ ' => 'N',   'ÃˆÂ¡' => 'd',
		'ÃˆÂ¤' => 'Z',   'ÃˆÂ¥' => 'z',   'ÃˆÂ¦' => 'A',   'ÃˆÂ§' => 'a',   'ÃˆÂ¨' => 'E',
		'ÃˆÂ©' => 'e',   'ÃˆÂª' => 'O',   'ÃˆÂ«' => 'o',   'ÃˆÂ¬' => 'O',   'ÃˆÂ­' => 'o',
		'ÃˆÂ®' => 'O',   'ÃˆÂ¯' => 'o',   'ÃˆÂ°' => 'O',   'ÃˆÂ±' => 'o',   'ÃˆÂ²' => 'Y',
		'ÃˆÂ³' => 'y',   'ÃˆÂ´' => 'l',   'ÃˆÂµ' => 'n',   'ÃˆÂ¶' => 't',   'ÃˆÂ·' => 'j',
		'ÃˆÂ¸' => 'db',  'ÃˆÂ¹' => 'qp',  'ÃˆÂº' => 'A',   'ÃˆÂ»' => 'C',   'ÃˆÂ¼' => 'c',
		'ÃˆÂ½' => 'L',   'ÃˆÂ¾' => 'T',   'ÃˆÂ¿' => 's',   'Ã‰â‚¬' => 'z',   'Ã‰Æ’' => 'B',
		'Ã‰â€ž' => 'U',   'Ã‰â€¦' => 'V',   'Ã‰â€ ' => 'E',   'Ã‰â€¡' => 'e',   'Ã‰Ë†' => 'J',
		'Ã‰â€°' => 'j',   'Ã‰Å ' => 'Q',   'Ã‰â€¹' => 'q',   'Ã‰Å’' => 'R',   'Ã‰ï¿½' => 'r',
		'Ã‰Å½' => 'Y',   'Ã‰ï¿½' => 'y',
		// IPA Extensions
		'Ã‰ï¿½' => 'a',   'Ã‰â€œ' => 'b',   'Ã‰â€�' => 'o',   'Ã‰â€¢' => 'c',   'Ã‰â€“' => 'd',
		'Ã‰â€”' => 'd',   'Ã‰Ëœ' => 'e',   'Ã‰â€º' => 'e',   'Ã‰Å“' => 'e',   'Ã‰ï¿½' => 'e',
		'Ã‰Å¾' => 'e',   'Ã‰Å¸' => 'j',   'Ã‰Â ' => 'g',   'Ã‰Â¡' => 'g',   'Ã‰Â¢' => 'G',
		'Ã‰Â¥' => 'h',   'Ã‰Â¦' => 'h',   'Ã‰Â¨' => 'i',   'Ã‰Âª' => 'I',   'Ã‰Â«' => 'l',
		'Ã‰Â¬' => 'l',   'Ã‰Â­' => 'l',   'Ã‰Â¯' => 'm',   'Ã‰Â°' => 'm',   'Ã‰Â±' => 'm',
		'Ã‰Â²' => 'n',   'Ã‰Â³' => 'n',   'Ã‰Â´' => 'N',   'Ã‰Âµ' => 'o',   'Ã‰Â¶' => 'OE',
		'Ã‰Â¹' => 'r',   'Ã‰Âº' => 'r',   'Ã‰Â»' => 'r',   'Ã‰Â¼' => 'r',   'Ã‰Â½' => 'r',
		'Ã‰Â¾' => 'r',   'Ã‰Â¿' => 'r',   'ÃŠâ‚¬' => 'R',   'ÃŠï¿½' => 'R',   'ÃŠâ€š' => 's',
		'ÃŠâ€¡' => 't',   'ÃŠË†' => 't',   'ÃŠâ€°' => 'u',   'ÃŠâ€¹' => 'v',   'ÃŠÅ’' => 'v',
		'ÃŠï¿½' => 'w',   'ÃŠÅ½' => 'y',   'ÃŠï¿½' => 'Y',   'ÃŠï¿½' => 'z',   'ÃŠâ€˜' => 'z',
		'ÃŠâ€”' => 'C',   'ÃŠâ„¢' => 'B',   'ÃŠÅ¡' => 'e',   'ÃŠâ€º' => 'G',   'ÃŠÅ“' => 'H',
		'ÃŠï¿½' => 'j',   'ÃŠÅ¾' => 'k',   'ÃŠÅ¸' => 'L',   'ÃŠÂ ' => 'q',   'ÃŠÂ£' => 'dz',
		'ÃŠÂ¥' => 'dz',  'ÃŠÂ¦' => 'ts',  'ÃŠÂ¨' => 'tc',  'ÃŠÂª' => 'ls',  'ÃŠÂ«' => 'lz',
		'ÃŠÂ®' => 'h',   'ÃŠÂ¯' => 'h',
		// Latin Extended Additional
		'Ã¡Â¸â‚¬' => 'A',   'Ã¡Â¸ï¿½' => 'a',   'Ã¡Â¸â€š' => 'B',   'Ã¡Â¸Æ’' => 'b',   'Ã¡Â¸â€ž' => 'B',
		'Ã¡Â¸â€¦' => 'b',   'Ã¡Â¸â€ ' => 'B',   'Ã¡Â¸â€¡' => 'b',   'Ã¡Â¸Ë†' => 'C',   'Ã¡Â¸â€°' => 'c',
		'Ã¡Â¸Å ' => 'D',   'Ã¡Â¸â€¹' => 'd',   'Ã¡Â¸Å’' => 'D',   'Ã¡Â¸ï¿½' => 'd',   'Ã¡Â¸Å½' => 'D',
		'Ã¡Â¸ï¿½' => 'd',   'Ã¡Â¸ï¿½' => 'D',   'Ã¡Â¸â€˜' => 'd',   'Ã¡Â¸â€™' => 'D',   'Ã¡Â¸â€œ' => 'd',
		'Ã¡Â¸â€�' => 'E',   'Ã¡Â¸â€¢' => 'e',   'Ã¡Â¸â€“' => 'E',   'Ã¡Â¸â€”' => 'e',   'Ã¡Â¸Ëœ' => 'E',
		'Ã¡Â¸â„¢' => 'e',   'Ã¡Â¸Å¡' => 'E',   'Ã¡Â¸â€º' => 'e',   'Ã¡Â¸Å“' => 'E',   'Ã¡Â¸ï¿½' => 'e',
		'Ã¡Â¸Å¾' => 'F',   'Ã¡Â¸Å¸' => 'f',   'Ã¡Â¸Â ' => 'G',   'Ã¡Â¸Â¡' => 'g',   'Ã¡Â¸Â¢' => 'H',
		'Ã¡Â¸Â£' => 'h',   'Ã¡Â¸Â¤' => 'H',   'Ã¡Â¸Â¥' => 'h',   'Ã¡Â¸Â¦' => 'H',   'Ã¡Â¸Â§' => 'h',
		'Ã¡Â¸Â¨' => 'H',   'Ã¡Â¸Â©' => 'h',   'Ã¡Â¸Âª' => 'H',   'Ã¡Â¸Â«' => 'h',   'Ã¡Â¸Â¬' => 'I',
		'Ã¡Â¸Â­' => 'i',   'Ã¡Â¸Â®' => 'I',   'Ã¡Â¸Â¯' => 'i',   'Ã¡Â¸Â°' => 'K',   'Ã¡Â¸Â±' => 'k',
		'Ã¡Â¸Â²' => 'K',   'Ã¡Â¸Â³' => 'k',   'Ã¡Â¸Â´' => 'K',   'Ã¡Â¸Âµ' => 'k',   'Ã¡Â¸Â¶' => 'L',
		'Ã¡Â¸Â·' => 'l',   'Ã¡Â¸Â¸' => 'L',   'Ã¡Â¸Â¹' => 'l',   'Ã¡Â¸Âº' => 'L',   'Ã¡Â¸Â»' => 'l',
		'Ã¡Â¸Â¼' => 'L',   'Ã¡Â¸Â½' => 'l',   'Ã¡Â¸Â¾' => 'M',   'Ã¡Â¸Â¿' => 'm',   'Ã¡Â¹â‚¬' => 'M',
		'Ã¡Â¹ï¿½' => 'm',   'Ã¡Â¹â€š' => 'M',   'Ã¡Â¹Æ’' => 'm',   'Ã¡Â¹â€ž' => 'N',   'Ã¡Â¹â€¦' => 'n',
		'Ã¡Â¹â€ ' => 'N',   'Ã¡Â¹â€¡' => 'n',   'Ã¡Â¹Ë†' => 'N',   'Ã¡Â¹â€°' => 'n',   'Ã¡Â¹Å ' => 'N',
		'Ã¡Â¹â€¹' => 'n',   'Ã¡Â¹Å’' => 'O',   'Ã¡Â¹ï¿½' => 'o',   'Ã¡Â¹Å½' => 'O',   'Ã¡Â¹ï¿½' => 'o',
		'Ã¡Â¹ï¿½' => 'O',   'Ã¡Â¹â€˜' => 'o',   'Ã¡Â¹â€™' => 'O',   'Ã¡Â¹â€œ' => 'o',   'Ã¡Â¹â€�' => 'P',
		'Ã¡Â¹â€¢' => 'p',   'Ã¡Â¹â€“' => 'P',   'Ã¡Â¹â€”' => 'p',   'Ã¡Â¹Ëœ' => 'R',   'Ã¡Â¹â„¢' => 'r',
		'Ã¡Â¹Å¡' => 'R',   'Ã¡Â¹â€º' => 'r',   'Ã¡Â¹Å“' => 'R',   'Ã¡Â¹ï¿½' => 'r',   'Ã¡Â¹Å¾' => 'R',
		'Ã¡Â¹Å¸' => 'r',   'Ã¡Â¹Â ' => 'S',   'Ã¡Â¹Â¡' => 's',   'Ã¡Â¹Â¢' => 'S',   'Ã¡Â¹Â£' => 's',
		'Ã¡Â¹Â¤' => 'S',   'Ã¡Â¹Â¥' => 's',   'Ã¡Â¹Â¦' => 'S',   'Ã¡Â¹Â§' => 's',   'Ã¡Â¹Â¨' => 'S',
		'Ã¡Â¹Â©' => 's',   'Ã¡Â¹Âª' => 'T',   'Ã¡Â¹Â«' => 't',   'Ã¡Â¹Â¬' => 'T',   'Ã¡Â¹Â­' => 't',
		'Ã¡Â¹Â®' => 'T',   'Ã¡Â¹Â¯' => 't',   'Ã¡Â¹Â°' => 'T',   'Ã¡Â¹Â±' => 't',   'Ã¡Â¹Â²' => 'U',
		'Ã¡Â¹Â³' => 'u',   'Ã¡Â¹Â´' => 'U',   'Ã¡Â¹Âµ' => 'u',   'Ã¡Â¹Â¶' => 'U',   'Ã¡Â¹Â·' => 'u',
		'Ã¡Â¹Â¸' => 'U',   'Ã¡Â¹Â¹' => 'u',   'Ã¡Â¹Âº' => 'U',   'Ã¡Â¹Â»' => 'u',   'Ã¡Â¹Â¼' => 'V',
		'Ã¡Â¹Â½' => 'v',   'Ã¡Â¹Â¾' => 'V',   'Ã¡Â¹Â¿' => 'v',   'Ã¡Âºâ‚¬' => 'W',   'Ã¡Âºï¿½' => 'w',
		'Ã¡Âºâ€š' => 'W',   'Ã¡ÂºÆ’' => 'w',   'Ã¡Âºâ€ž' => 'W',   'Ã¡Âºâ€¦' => 'w',   'Ã¡Âºâ€ ' => 'W',
		'Ã¡Âºâ€¡' => 'w',   'Ã¡ÂºË†' => 'W',   'Ã¡Âºâ€°' => 'w',   'Ã¡ÂºÅ ' => 'X',   'Ã¡Âºâ€¹' => 'x',
		'Ã¡ÂºÅ’' => 'X',   'Ã¡Âºï¿½' => 'x',   'Ã¡ÂºÅ½' => 'Y',   'Ã¡Âºï¿½' => 'y',   'Ã¡Âºï¿½' => 'Z',
		'Ã¡Âºâ€˜' => 'z',   'Ã¡Âºâ€™' => 'Z',   'Ã¡Âºâ€œ' => 'z',   'Ã¡Âºâ€�' => 'Z',   'Ã¡Âºâ€¢' => 'z',
		'Ã¡Âºâ€“' => 'h',   'Ã¡Âºâ€”' => 't',   'Ã¡ÂºËœ' => 'w',   'Ã¡Âºâ„¢' => 'y',   'Ã¡ÂºÅ¡' => 'a',
		'Ã¡ÂºÂ ' => 'A',   'Ã¡ÂºÂ¡' => 'a',   'Ã¡ÂºÂ¢' => 'A',   'Ã¡ÂºÂ£' => 'a',   'Ã¡ÂºÂ¤' => 'A',
		'Ã¡ÂºÂ¥' => 'a',   'Ã¡ÂºÂ¦' => 'A',   'Ã¡ÂºÂ§' => 'a',   'Ã¡ÂºÂ¨' => 'A',   'Ã¡ÂºÂ©' => 'a',
		'Ã¡ÂºÂª' => 'A',   'Ã¡ÂºÂ«' => 'a',   'Ã¡ÂºÂ¬' => 'A',   'Ã¡ÂºÂ­' => 'a',   'Ã¡ÂºÂ®' => 'A',
		'Ã¡ÂºÂ¯' => 'a',   'Ã¡ÂºÂ°' => 'A',   'Ã¡ÂºÂ±' => 'a',   'Ã¡ÂºÂ²' => 'A',   'Ã¡ÂºÂ³' => 'a',
		'Ã¡ÂºÂ´' => 'A',   'Ã¡ÂºÂµ' => 'a',   'Ã¡ÂºÂ¶' => 'A',   'Ã¡ÂºÂ·' => 'a',   'Ã¡ÂºÂ¸' => 'E',
		'Ã¡ÂºÂ¹' => 'e',   'Ã¡ÂºÂº' => 'E',   'Ã¡ÂºÂ»' => 'e',   'Ã¡ÂºÂ¼' => 'E',   'Ã¡ÂºÂ½' => 'e',
		'Ã¡ÂºÂ¾' => 'E',   'Ã¡ÂºÂ¿' => 'e',   'Ã¡Â»â‚¬' => 'E',   'Ã¡Â»ï¿½' => 'e',   'Ã¡Â»â€š' => 'E',
		'Ã¡Â»Æ’' => 'e',   'Ã¡Â»â€ž' => 'E',   'Ã¡Â»â€¦' => 'e',   'Ã¡Â»â€ ' => 'E',   'Ã¡Â»â€¡' => 'e',
		'Ã¡Â»Ë†' => 'I',   'Ã¡Â»â€°' => 'i',   'Ã¡Â»Å ' => 'I',   'Ã¡Â»â€¹' => 'i',   'Ã¡Â»Å’' => 'O',
		'Ã¡Â»ï¿½' => 'o',   'Ã¡Â»Å½' => 'O',   'Ã¡Â»ï¿½' => 'o',   'Ã¡Â»ï¿½' => 'O',   'Ã¡Â»â€˜' => 'o',
		'Ã¡Â»â€™' => 'O',   'Ã¡Â»â€œ' => 'o',   'Ã¡Â»â€�' => 'O',   'Ã¡Â»â€¢' => 'o',   'Ã¡Â»â€“' => 'O',
		'Ã¡Â»â€”' => 'o',   'Ã¡Â»Ëœ' => 'O',   'Ã¡Â»â„¢' => 'o',   'Ã¡Â»Å¡' => 'O',   'Ã¡Â»â€º' => 'o',
		'Ã¡Â»Å“' => 'O',   'Ã¡Â»ï¿½' => 'o',   'Ã¡Â»Å¾' => 'O',   'Ã¡Â»Å¸' => 'o',   'Ã¡Â»Â ' => 'O',
		'Ã¡Â»Â¡' => 'o',   'Ã¡Â»Â¢' => 'O',   'Ã¡Â»Â£' => 'o',   'Ã¡Â»Â¤' => 'U',   'Ã¡Â»Â¥' => 'u',
		'Ã¡Â»Â¦' => 'U',   'Ã¡Â»Â§' => 'u',   'Ã¡Â»Â¨' => 'U',   'Ã¡Â»Â©' => 'u',   'Ã¡Â»Âª' => 'U',
		'Ã¡Â»Â«' => 'u',   'Ã¡Â»Â¬' => 'U',   'Ã¡Â»Â­' => 'u',   'Ã¡Â»Â®' => 'U',   'Ã¡Â»Â¯' => 'u',
		'Ã¡Â»Â°' => 'U',   'Ã¡Â»Â±' => 'u',   'Ã¡Â»Â²' => 'Y',   'Ã¡Â»Â³' => 'y',   'Ã¡Â»Â´' => 'Y',
		'Ã¡Â»Âµ' => 'y',   'Ã¡Â»Â¶' => 'Y',   'Ã¡Â»Â·' => 'y',   'Ã¡Â»Â¸' => 'Y',   'Ã¡Â»Â¹' => 'y',
		// General Punctuation
		'Ã¢â‚¬â‚¬' => ' ',   'Ã¢â‚¬ï¿½' => ' ',   'Ã¢â‚¬â€š' => ' ',   'Ã¢â‚¬Æ’' => ' ',   'Ã¢â‚¬â€ž' => ' ',
		'Ã¢â‚¬â€¦' => ' ',   'Ã¢â‚¬â€ ' => ' ',   'Ã¢â‚¬â€¡' => ' ',   'Ã¢â‚¬Ë†' => ' ',   'Ã¢â‚¬â€°' => ' ',
		'Ã¢â‚¬Å ' => ' ',   'Ã¢â‚¬â€¹' => '',    'Ã¢â‚¬Å’' => '',    'Ã¢â‚¬ï¿½' => '',    'Ã¢â‚¬ï¿½' => '-',
		'Ã¢â‚¬â€˜' => '-',   'Ã¢â‚¬â€™' => '-',   'Ã¢â‚¬â€œ' => '-',   'Ã¢â‚¬â€�' => '-',   'Ã¢â‚¬â€¢' => '-',
		'Ã¢â‚¬â€“' => '||',  'Ã¢â‚¬Ëœ' => "'",   'Ã¢â‚¬â„¢' => "'",   'Ã¢â‚¬Å¡' => ',',   'Ã¢â‚¬â€º' => "'",
		'Ã¢â‚¬Å“' => '"',   'Ã¢â‚¬ï¿½' => '"',   'Ã¢â‚¬Å¸' => '"',   'Ã¢â‚¬Â¤' => '.',   'Ã¢â‚¬Â¥' => '..',
		'Ã¢â‚¬Â¦' => '...', 'Ã¢â‚¬Â¯' => ' ',   'Ã¢â‚¬Â²' => "'",   'Ã¢â‚¬Â³' => '"',   'Ã¢â‚¬Â´' => '\'"',
		'Ã¢â‚¬Âµ' => "'",   'Ã¢â‚¬Â¶' => '"',   'Ã¢â‚¬Â·' => '"\'', 'Ã¢â‚¬Â¹' => '<',   'Ã¢â‚¬Âº' => '>',
		'Ã¢â‚¬Â¼' => '!!',  'Ã¢â‚¬Â½' => '?!',  'Ã¢ï¿½â€ž' => '/',   'Ã¢ï¿½â€¡' => '?/',  'Ã¢ï¿½Ë†' => '?!',
		'Ã¢ï¿½â€°' => '!?',
		// Letterlike Symbols
		'Ã¢â€žÂ ' => 'SM',  'Ã¢â€žÂ¢' => 'TM',
		// Number Forms
		'Ã¢â€¦â€œ' => '1/3', 'Ã¢â€¦â€�' => '2/3', 'Ã¢â€¦â€¢' => '1/5', 'Ã¢â€¦â€“' => '2/5', 'Ã¢â€¦â€”' => '3/5',
		'Ã¢â€¦Ëœ' => '4/5', 'Ã¢â€¦â„¢' => '1/6', 'Ã¢â€¦Å¡' => '5/6', 'Ã¢â€¦â€º' => '1/8', 'Ã¢â€¦Å“' => '3/8',
		'Ã¢â€¦ï¿½' => '5/8', 'Ã¢â€¦Å¾' => '7/8', 'Ã¢â€¦Â ' => 'I',   'Ã¢â€¦Â¡' => 'II',  'Ã¢â€¦Â¢' => 'III',
		'Ã¢â€¦Â£' => 'IV',  'Ã¢â€¦Â¤' => 'V',   'Ã¢â€¦Â¥' => 'Vi',  'Ã¢â€¦Â¦' => 'VII', 'Ã¢â€¦Â§' => 'VIII',
		'Ã¢â€¦Â¨' => 'IX',  'Ã¢â€¦Â©' => 'X',   'Ã¢â€¦Âª' => 'XI',  'Ã¢â€¦Â«' => 'XII', 'Ã¢â€¦Â¬' => 'L',
		'Ã¢â€¦Â­' => 'C',   'Ã¢â€¦Â®' => 'D',   'Ã¢â€¦Â¯' => 'M',   'Ã¢â€¦Â°' => 'i',   'Ã¢â€¦Â±' => 'ii',
		'Ã¢â€¦Â²' => 'iii', 'Ã¢â€¦Â³' => 'iv',  'Ã¢â€¦Â´' => 'v',   'Ã¢â€¦Âµ' => 'vi',  'Ã¢â€¦Â¶' => 'vii',
		'Ã¢â€¦Â·' => 'viii','Ã¢â€¦Â¸' => 'ix',  'Ã¢â€¦Â¹' => 'x',   'Ã¢â€¦Âº' => 'xi',  'Ã¢â€¦Â»' => 'xii',
		'Ã¢â€¦Â¼' => 'l',   'Ã¢â€¦Â½' => 'c',   'Ã¢â€¦Â¾' => 'd',   'Ã¢â€¦Â¿' => 'm'
	);

	/**
	 * If the [http://php.net/mbstring mbstring] extension is available
	 *
	 * @var boolean
	 */
	static private $mbstring_available = NULL;


	/**
	 * Maps UTF-8 ASCII-based latin characters, puntuation, symbols and number forms to ASCII
	 *
	 * Any characters or symbols that can not be translated will be removed.
	 *
	 * This function is most useful for situation that only allows ASCII, such
	 * as in URLs.
	 *
	 * Translates elements form the following unicode blocks:
	 *
	 *  - Latin-1 Supplement
	 *  - Latin Extended-A
	 *  - Latin Extended-B
	 *  - IPA Extensions
	 *  - Latin Extended Additional
	 *  - General Punctuation
	 *  - Letterlike symbols
	 *  - Number Forms
	 *
	 * @internal
	 *
	 * @param  string $string  The string to convert
	 * @return string  The input string in pure ASCII
	 */
	static public function ascii($string)
	{
		if (!self::detect($string)) {
			return $string;
		}

		$string = strtr($string, self::$utf8_to_ascii);
		return preg_replace('#[^\x00-\x7F]#', '', $string);
	}


	/**
	 * Checks to see if the [http://php.net/mbstring mbstring] extension is available
	 *
	 * @return void
	 */
	static private function checkMbString()
	{
		self::$mbstring_available = extension_loaded('mbstring');
	}


	/**
	 * Converts a unicode value into a UTF-8 character
	 *
	 * @param  mixed $unicode_code_point  The character to create, either the `U+hex` or decimal code point
	 * @return string  The UTF-8 character
	 */
	static public function chr($unicode_code_point)
	{
		if (is_string($unicode_code_point) && substr($unicode_code_point, 0, 2) == 'U+') {
			$unicode_code_point = substr($unicode_code_point, 2);
			$unicode_code_point = hexdec($unicode_code_point);
		}

		$bin = decbin($unicode_code_point);
		$digits = strlen($bin);

		$first = $second = $third = $fourth = NULL;

		// One byte characters
		if ($digits <= 7) {
			$first = chr(bindec($bin));

		// Two byte characters
		} elseif ($digits <= 11) {
			$first  = chr(bindec('110' . str_pad(substr($bin, 0, -6), 5, '0', STR_PAD_LEFT)));
			$second = chr(bindec('10' . substr($bin, -6)));

		// Three byte characters
		} elseif ($digits <= 16) {
			$first  = chr(bindec('1110' . str_pad(substr($bin, 0, -12), 4, '0', STR_PAD_LEFT)));
			$second = chr(bindec('10' . substr($bin, -12, -6)));
			$third  = chr(bindec('10' . substr($bin, -6)));

		// Four byte characters
		} elseif ($digits <= 21) {
			$first  = chr(bindec('11110' . str_pad(substr($bin, 0, -18), 3, '0', STR_PAD_LEFT)));
			$second = chr(bindec('10' . substr($bin, -18, -12)));
			$third  = chr(bindec('10' . substr($bin, -12, -6)));
			$fourth = chr(bindec('10' . substr($bin, -6)));
		}

		$ord = ord($first);
		if ($digits > 21 || $ord == 0xC0 || $ord == 0xC1 || $ord > 0xF4) {
			throw new \Exception(
				'The code point specified, %s, is invalid.',
				$unicode_code_point
			);
		}

		return $first . $second . $third . $fourth;
	}


	/**
	 * Removes any invalid UTF-8 characters from a string or array of strings
	 *
	 * @param  array|string $value  The string or array of strings to clean
	 * @return string  The cleaned string
	 */
	static public function clean($value)
	{
		if (!is_array($value)) {
			if (self::$can_ignore_invalid === NULL) {
				self::$can_ignore_invalid = !in_array(strtolower(ICONV_IMPL), array('unknown', 'ibm iconv'));	
			}
			$value = self::iconv('UTF-8', 'UTF-8' . (self::$can_ignore_invalid ? '//IGNORE' : ''), (string) $value);
			return $value;
		}

		$keys = array_keys($value);
		$num_keys = sizeof($keys);
		for ($i=0; $i<$num_keys; $i++) {
			$value[$keys[$i]] = self::clean($value[$keys[$i]]);
		}

		return $value;
	}


	/**
	 * Compares strings, with the resulting order having latin characters that are based on ASCII letters placed after the relative ASCII characters
	 *
	 * Please note that this function sorts based on English language sorting
	 * rules only. Locale-sepcific sorting is done by
	 * [http://php.net/strcoll strcoll()], however there are technical
	 * limitations.
	 *
	 * @param  string $str1  The first string to compare
	 * @param  string $str2  The second string to compare
	 * @return integer  < 0 if $str1 < $str2, 0 if they are equal, > 0 if $str1 > $str2
	 */
	static public function cmp($str1, $str2)
	{
		$ascii_str1 = strtr($str1, self::$utf8_to_ascii);
		$ascii_str2 = strtr($str2, self::$utf8_to_ascii);

		$res = strcmp($ascii_str1, $ascii_str2);

		// If the ASCII representations are the same, sort by the UTF-8 representations
		if ($res === 0) {
			$res = strcmp($str1, $str2);
		}

		return $res;
	}


	/**
	 * Converts an offset in characters to an offset in bytes to that we can use the built-in functions for some operations
	 *
	 * @param  string  $string  The string to base the offset on
	 * @param  integer $offset  The character offset to conver to bytes
	 * @return integer  The converted offset
	 */
	static private function convertOffsetToBytes($string, $offset)
	{
		if ($offset == 0) {
			return 0;
		}

		$len = strlen($string);

		$byte_offset     = 0;
		$measured_offset = 0;
		$sign            = 1;

		// Negative offsets require us to reverse some stuff
		if ($offset < 0) {
			$string    = strrev($string);
			$sign      = -1;
			$offset    = abs($offset);
		}

		for ($i=0; $i<$len && $measured_offset<$offset; $i++) {
			$char = $string[$i];
			++$byte_offset;
			if (ord($char) < 0x80) {
				++$measured_offset;
			} else {
				switch (ord($char) & 0xF0) {
					case 0xF0:
					case 0xE0:
					case 0xD0:
					case 0xC0:
						++$measured_offset;
						break;
				}
			}
		}

		return $byte_offset * $sign;
	}


	/**
	 * Detects if a UTF-8 string contains any non-ASCII characters
	 *
	 * @param  string $string  The string to check
	 * @return boolean  If the string contains any non-ASCII characters
	 */
	static private function detect($string)
	{
		return (boolean) preg_match('#[^\x00-\x7F]#', $string);
	}


	/**
	 * Explodes a string on a delimiter
	 *
	 * If no delimiter is provided, the string will be exploded with each
	 * characters being an element in the array.
	 *
	 * @param  string  $string     The string to explode
	 * @param  string  $delimiter  The string to explode on. If `NULL` or `''` this method will return one character per array index.
	 * @return array  The exploded string
	 */
	static public function explode($string, $delimiter=NULL)
	{
		// If a delimiter was passed, we just do an explode
		if ($delimiter || (!$delimiter && is_numeric($delimiter))) {
			return explode($delimiter, $string);
		}

		// If no delimiter was passed, we explode the characters into an array
		preg_match_all('#.|^\z#us', $string, $matches);
		return $matches[0];
	}


	/**
	 * This works around a bug in MAMP 1.9.4+ and PHP 5.3 where iconv()
	 * does not seem to properly assign the return value to a variable, but
	 * does work when returning the value.
	 *
	 * @param string $in_charset   The incoming character encoding
	 * @param string $out_charset  The outgoing character encoding
	 * @param string $string       The string to convert
	 * @return string  The converted string
	 */
	static private function iconv($in_charset, $out_charset, $string)
	{
		return @iconv($in_charset, $out_charset, $string);
	}
	
	
	/**
	 * Compares strings in a case-insensitive manner, with the resulting order having characters that are based on ASCII letters placed after the relative ASCII characters
	 *
	 * Please note that this function sorts based on English language sorting
	 * rules only. Locale-sepcific sorting is done by
	 * [http://php.net/strcoll strcoll()], however there are technical
	 * limitations.
	 *
	 * @param  string $str1  The first string to compare
	 * @param  string $str2  The second string to compare
	 * @return integer  < 0 if $str1 < $str2, 0 if they are equal, > 0 if $str1 > $str2
	 */
	static public function icmp($str1, $str2)
	{
		$str1 = self::lower($str1);
		$str2 = self::lower($str2);

		return self::cmp($str1, $str2);
	}


	/**
	 * Compares strings using a natural order algorithm in a case-insensitive manner, with the resulting order having latin characters that are based on ASCII letters placed after the relative ASCII characters
	 *
	 * Please note that this function sorts based on English language sorting
	 * rules only. Locale-sepcific sorting is done by
	 * [http://php.net/strcoll strcoll()], however there are technical
	 * limitations.
	 *
	 * @param  string $str1  The first string to compare
	 * @param  string $str2  The second string to compare
	 * @return integer  `< 0` if `$str1 < $str2`, `0` if they are equal, `> 0` if `$str1 > $str2`
	 */
	static public function inatcmp($str1, $str2)
	{
		$str1 = self::lower($str1);
		$str2 = self::lower($str2);

		return self::natcmp($str1, $str2);
	}


	/**
	 * Finds the first position (in characters) of the search value in the string - case is ignored when doing performing a match
	 *
	 * @param  string  $haystack  The string to search in
	 * @param  string  $needle    The string to search for. This match will be done in a case-insensitive manner.
	 * @param  integer $offset    The character position to start searching from
	 * @return mixed  The integer character position of the first occurence of the needle or `FALSE` if no match
	 */
	static public function ipos($haystack, $needle, $offset=0)
	{
		// We get better performance falling back for ASCII strings
		if (!self::detect($haystack)) {
			return stripos($haystack, $needle, $offset);
		}

		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available && function_exists('mb_stripos')) {
			return mb_stripos($haystack, $needle, $offset, 'UTF-8');
		}

		$haystack = self::lower($haystack);
		$needle   = self::lower($needle);

		return self::pos($haystack, $needle, $offset);
	}


	/**
	 * Replaces matching parts of the string, with matches being done in a a case-insensitive manner
	 *
	 * If `$search` and `$replace` are both arrays and `$replace` is shorter,
	 * the extra `$search` string will be replaced with an empty string. If
	 * `$search` is an array and `$replace` is a string, all `$search` values
	 * will be replaced with the string specified.
	 *
	 * @param  string $string   The string to perform the replacements on
	 * @param  mixed  $search   The string (or array of strings) to search for - see method description for details
	 * @param  mixed  $replace  The string (or array of strings) to replace with - see method description for details
	 * @return string  The input string with the specified replacements
	 */
	static public function ireplace($string, $search, $replace)
	{
		if (is_array($search)) {
			foreach ($search as &$needle) {
				$needle = '#' . preg_quote($needle, '#') . '#ui';
			}
		} else {
			$search = '#' . preg_quote($search, '#') . '#ui';
		}
		return preg_replace(
			$search,
			strtr($replace, array('\\' => '\\\\', '$' => '\\$')),
			$string
		);
	}


	/**
	 * Finds the last position (in characters) of the search value in the string - case is ignored when doing performing a match
	 *
	 * @param  string  $haystack  The string to search in
	 * @param  string  $needle    The string to search for. This match will be done in a case-insensitive manner.
	 * @param  integer $offset    The character position to start searching from. A negative value will stop looking that many characters from the end of the string
	 * @return mixed  The integer character position of the last occurence of the needle or `FALSE` if no match
	 */
	static public function irpos($haystack, $needle, $offset=0)
	{
		// We get better performance falling back for ASCII strings
		if (!self::detect($haystack)) {
			return strripos($haystack, $needle, $offset);
		}

		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available && function_exists('mb_strripos')) {
			return mb_strripos($haystack, $needle, $offset, 'UTF-8');
		}

		$haystack = self::lower($haystack);
		$needle   = self::lower($needle);

		return self::rpos($haystack, $needle, $offset);
	}


	/**
	 * Matches a string needle in the string haystack, returning a substring from the beginning of the needle to the end of the haystack
	 *
	 * Can optionally return the part of the haystack before the needle. Matching
	 * is done in a case-insensitive manner.
	 *
	 * @param  string  $haystack       The string to search in
	 * @param  string  $needle         The string to search for. This match will be done in a case-insensitive manner.
	 * @param  boolean $before_needle  If a substring of the haystack before the needle should be returned instead of the substring from the needle to the end of the haystack
	 * @return mixed  The specified part of the haystack, or `FALSE` if the needle was not found
	 */
	static public function istr($haystack, $needle, $before_needle=FALSE)
	{
		// We get better performance falling back for ASCII strings
		if ($before_needle == FALSE && !self::detect($haystack)) {
			return stristr($haystack, $needle);
		}

		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available && function_exists('mb_stristr')) {
			return mb_stristr($haystack, $needle, $before_needle, 'UTF-8');
		}

		$lower_haystack = self::lower($haystack);
		$lower_needle   = self::lower($needle);

		$pos = strpos($lower_haystack, $lower_needle);

		if ($before_needle) {
			return substr($haystack, 0, $pos);
		}

		return substr($haystack, $pos);
	}


	/**
	 * Determines the length (in characters) of a string
	 *
	 * @param  string $string  The string to measure
	 * @return integer  The number of characters in the string
	 */
	static public function len($string)
	{
		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available) {
			return mb_strlen($string, 'UTF-8');
		}

		return strlen(utf8_decode($string));
	}


	/**
	 * Converts all uppercase characters to lowercase
	 *
	 * @param  string $string  The string to convert
	 * @return string  The input string with all uppercase characters in lowercase
	 */
	static public function lower($string)
	{
		// We get better performance falling back for ASCII strings
		if (!self::detect($string)) {
			return strtolower($string);
		}

		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available) {
			$string = mb_strtolower($string, 'utf-8');
			// For some reason mb_strtolower misses some character
			return strtr($string, self::$mb_upper_to_lower_fix);
		}

		return strtr($string, self::$upper_to_lower);
	}


	/**
	 * Trims whitespace, or any specified characters, from the beginning of a string
	 *
	 * @param  string $string    The string to trim
	 * @param  string $charlist  The characters to trim
	 * @return string  The trimmed string
	 */
	static public function ltrim($string, $charlist=NULL)
	{
		if (strlen($charlist) === 0) {
			return ltrim($string);
		}

		$search = preg_quote($charlist, '#');
		$search = str_replace('-', '\-', $search);
		$search = str_replace('\.\.', '-', $search);
		return preg_replace('#^[' . $search . ']+#Du', '', $string);
	}


	/**
	 * Compares strings using a natural order algorithm, with the resulting order having latin characters that are based on ASCII letters placed after the relative ASCII characters
	 *
	 * Please note that this function sorts based on English language sorting
	 * rules only. Locale-sepcific sorting is done by
	 * [http://php.net/strcoll strcoll()], however there are technical
	 * limitations.
	 *
	 * @param  string $str1  The first string to compare
	 * @param  string $str2  The second string to compare
	 * @return integer  `< 0` if `$str1 < $str2`, `0` if they are equal, `> 0` if `$str1 > $str2`
	 */
	static public function natcmp($str1, $str2)
	{
		$ascii_str1 = strtr($str1, self::$utf8_to_ascii);
		$ascii_str2 = strtr($str2, self::$utf8_to_ascii);

		$res = strnatcmp($ascii_str1, $ascii_str2);

		// If the ASCII representations are the same, sort by the UTF-8 representations
		if ($res === 0) {
			$res = strnatcmp($str1, $str2);
		}

		return $res;
	}


	/**
	 * Converts a UTF-8 character to a unicode code point
	 *
	 * @param  string $character  The character to decode
	 * @return string  The U+hex unicode code point for the character
	 */
	static public function ord($character)
	{
		$b       = array_map('ord', str_split($character));
		$invalid = FALSE;

		switch (strlen($character)) {
			case 1:
				if ($b[0] > 0x7F) {
					$invalid = TRUE;
					break;
				}
				$bin = decbin($b[0]);
				break;

			case 2:
				if ($b[0] < 0xC2 || $b[0] > 0xDF ||
					  $b[1] < 0x80 || $b[1] > 0xBF) {
					$invalid = TRUE;
					break;
				}
				$bin = substr(decbin($b[0]), 3) .
						   substr(decbin($b[1]), 2);
				break;

			case 3:
				if ($b[0] < 0xE0 || $b[0] > 0xEF ||
					  $b[1] < 0x80 || $b[1] > 0xBF ||
					  $b[2] < 0x80 || $b[2] > 0xBF) {
					$invalid = TRUE;
					break;
				}
				$bin = substr(decbin($b[0]), 4) .
						   substr(decbin($b[1]), 2) .
						   substr(decbin($b[2]), 2);
				break;

			case 4:
				if ($b[0] < 0xF0 || $b[0] > 0xF4 ||
					  $b[1] < 0x80 || $b[1] > 0xBF ||
					  $b[2] < 0x80 || $b[2] > 0xBF ||
					  $b[3] < 0x80 || $b[3] > 0xBF) {
					$invalid = TRUE;
					break;
				}
				$bin = substr(decbin($b[0]), 5) .
						   substr(decbin($b[1]), 2) .
						   substr(decbin($b[2]), 2) .
						   substr(decbin($b[3]), 2);
				break;

			default:
				$invalid = TRUE;
				break;
		}

		if ($invalid) {
			throw new \Exception (
				'The UTF-8 character specified is invalid'
			);
		}

		$hex = strtoupper(dechex(bindec($bin)));
		return 'U+' . str_pad($hex, 4, '0', STR_PAD_LEFT);
	}


	/**
	 * Pads a string to the number of characters specified
	 *
	 * @param  string  $string      The string to pad
	 * @param  integer $pad_length  The character length to pad the string to
	 * @param  string  $pad_string  The string to pad the source string with
	 * @param  string  $pad_type    The type of padding to do: `'left'`, `'right'`, `'both'`
	 * @return string  The input string padded to the specified character width
	 */
	static public function pad($string, $pad_length, $pad_string=' ', $pad_type='right')
	{
		$valid_pad_types = array('right', 'left', 'both');
		if (!in_array($pad_type, $valid_pad_types)) {
			throw new \Exception(
				'The pad type specified, %1$s, is not valid. Must be one of: %2$s.',
				$pad_type,
				join(', ', $valid_pad_types)
			);
		}

		// We get better performance falling back for ASCII strings
		if (!self::detect($string) && !self::detect($pad_string)) {
			static $type_map = array(
				'left'  => STR_PAD_LEFT,
				'right' => STR_PAD_RIGHT,
				'both'  => STR_PAD_BOTH
			);
			return str_pad($string, $pad_length, $pad_string, $type_map[$pad_type]);
		}


		$string_length     = self::len($string);
		$pad_string_length = self::len($pad_string);

		$pad_to_length     = $pad_length - $string_length;

		if ($pad_to_length < 1) {
			return $string;
		}

		$padded           = 0;
		$next_side        = 'left';
		$left_pad_string  = '';
		$right_pad_string = '';

		while ($padded < $pad_to_length) {

			// For pad strings over 1 characters long, they may be too long to fit
			if ($pad_to_length - $padded < $pad_string_length) {
				$pad_string = self::sub($pad_string, 0, $pad_to_length - $padded);
			}

			switch (($pad_type != 'both') ? $pad_type : $next_side) {
				case 'right':
					$right_pad_string .= $pad_string;
					$next_side = 'left';
					break;

				case 'left':
					$left_pad_string .= $pad_string;
					$next_side = 'right';
					break;
			}

			$padded += $pad_string_length;
		}

		return $left_pad_string . $string . $right_pad_string;
	}


	/**
	 * Finds the first position (in characters) of the search value in the string
	 *
	 * @param  string  $haystack  The string to search in
	 * @param  string  $needle    The string to search for
	 * @param  integer $offset    The character position to start searching from
	 * @return mixed  The integer character position of the first occurence of the needle or `FALSE` if no match
	 */
	static public function pos($haystack, $needle, $offset=0)
	{
		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available) {
			return mb_strpos($haystack, $needle, $offset, 'UTF-8');
		}

		$offset = self::convertOffsetToBytes($haystack, $offset);

		$position = strpos($haystack, $needle, $offset);

		if ($position === FALSE) {
			return FALSE;
		}

		return strlen(utf8_decode(substr($haystack, 0, $position)));
	}


	/**
	 * Replaces matching parts of the string
	 *
	 * If `$search` and `$replace` are both arrays and `$replace` is shorter,
	 * the extra `$search` string will be replaced with an empty string. If
	 * `$search` is an array and `$replace` is a string, all `$search` values
	 * will be replaced with the string specified.
	 *
	 * @param  string $string   The string to perform the replacements on
	 * @param  mixed  $search   The string (or array of strings) to search for - see method description for details
	 * @param  mixed  $replace  The string (or array of strings) to replace with - see method description for details
	 * @return string  The input string with the specified replacements
	 */
	static public function replace($string, $search, $replace)
	{
		return str_replace($search, $replace, $string);
	}


	/**
	 * Resets the configuration of the class
	 *
	 * @internal
	 *
	 * @return void
	 */
	static public function reset()
	{
		self::$mbstring_available = NULL;
	}


	/**
	 * Reverses a string
	 *
	 * @param  string $string   The string to reverse
	 * @return string  The reversed string
	 */
	static public function rev($string)
	{
		$output = '';
		$len = strlen($string);

		static $char_lens = array(
			0xF0 => 4,
			0xE0 => 3,
			0xD0 => 2,
			0xC0 => 2
		);

		$mb_char = '';
		for ($i=0; $i<$len; $i++) {
			$char = $string[$i];
			if (ord($char) < 128) {
				$output = $char . $output;
			} else {
				switch (ord($char) & 0xF0) {
					case 0xF0:
						$output = $string[$i] . $string[$i+1] . $string[$i+2] . $string[$i+3] . $output;
						$i += 3;
						break;

					case 0xE0:
						$output = $string[$i] . $string[$i+1] . $string[$i+2] . $output;
						$i += 2;
						break;

					case 0xD0:
					case 0xC0:
						$output = $string[$i] . $string[$i+1] . $output;
						$i += 1;
						break;
				}
			}
		}

		return $output;
	}


	/**
	 * Finds the last position (in characters) of the search value in the string
	 *
	 * @param  string  $haystack  The string to search in
	 * @param  string  $needle    The string to search for.
	 * @param  integer $offset    The character position to start searching from. A negative value will stop looking that many characters from the end of the string
	 * @return mixed  The integer character position of the last occurence of the needle or `FALSE` if no match
	 */
	static public function rpos($haystack, $needle, $offset=0)
	{
		// We get better performance falling back for ASCII strings
		if (!self::detect($haystack)) {
			return strrpos($haystack, $needle, $offset);
		}

		// We don't even both trying mb_strrpos since this method is faster

		$offset = self::convertOffsetToBytes($haystack, $offset);

		$position = strrpos($haystack, $needle, $offset);

		if ($position === FALSE) {
			return FALSE;
		}

		return strlen(utf8_decode(substr($haystack, 0, $position)));
	}


	/**
	 * Trims whitespace, or any specified characters, from the end of a string
	 *
	 * @param  string $string    The string to trim
	 * @param  string $charlist  The characters to trim
	 * @return string  The trimmed string
	 */
	static public function rtrim($string, $charlist=NULL)
	{
		if (strlen($charlist) === 0) {
			return rtrim($string);
		}

		$search = preg_quote($charlist, '#');
		$search = str_replace('-', '\-', $search);
		$search = str_replace('\.\.', '-', $search);
		return preg_replace('#[' . $search . ']+$#Du', '', $string);
	}


	/**
	 * Matches a string needle in the string haystack, returning a substring from the beginning of the needle to the end of the haystack
	 *
	 * Can optionally return the part of the haystack before the needle.
	 *
	 * @param  string  $haystack       The string to search in
	 * @param  string  $needle         The string to search for
	 * @param  boolean $before_needle  If a substring of the haystack before the needle should be returned instead of the substring from the needle to the end of the haystack
	 * @return mixed  The specified part of the haystack, or `FALSE` if the needle was not found
	 */
	static public function str($haystack, $needle, $before_needle=FALSE)
	{
		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available && function_exists('mb_strstr')) {
			return mb_strstr($haystack, $needle, $before_needle, 'UTF-8');
		}

		$pos = strpos($haystack, $needle);

		if ($pos === FALSE) {
			return $pos;
		}

		if ($before_needle) {
			return substr($haystack, 0, $pos);
		}

		return substr($haystack, $pos);
	}


	/**
	 * Extracts part of a string
	 *
	 * @param  string  $string  The string to extract from
	 * @param  integer $start   The zero-based starting index to extract from. Negative values will start the extraction that many characters from the end of the string.
	 * @param  integer $length  The length of the string to extract. If an empty value is provided, the remainder of the string will be returned.
	 * @return mixed  The extracted subtring or `FALSE` if the start is out of bounds
	 */
	static public function sub($string, $start, $length=NULL)
	{
		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available) {
			$str_len = mb_strlen($string, 'UTF-8');
			if (abs($start) > $str_len) {
				return FALSE;
			}
			if ($length === NULL) {
				if ($start >= 0) {
					$length = $str_len-$start;
				} else {
					$length = abs($start);
				}
			}
			return mb_substr($string, $start, $length, 'UTF-8');
		}

		// We get better performance falling back for ASCII strings
		if (!self::detect($string)) {
			if ($length === NULL) {
				if ($start >= 0) {
					$length = strlen($string)-$start;
				} else {
					$length = abs($start);
				}
			}
			return substr($string, $start, $length);
		}


		// This is the slowest version
		$str_len = strlen(utf8_decode($string));

		if (abs($start) > $str_len) {
			return FALSE;
		}

		// Optimize looking by changing to negative start positions if the
		// start is in the second half of the string
		if ($start > $str_len/2) {
			$start = 0-($str_len-$start);
		}

		// Substrings to the end of the string are pretty simple
		$start  = self::convertOffsetToBytes($string, $start);
		$string = substr($string, $start);

		if ($length === NULL) {
			return $string;
		}

		$length = self::convertOffsetToBytes($string, $length);
		return substr($string, 0, $length);
	}


	/**
	 * Trims whitespace, or any specified characters, from the beginning and end of a string
	 *
	 * @param  string $string    The string to trim
	 * @param  string $charlist  The characters to trim, .. indicates a range
	 * @return string  The trimmed string
	 */
	static public function trim($string, $charlist=NULL)
	{
		if (strlen($charlist) === 0) {
			return trim($string);
		}

		$search = preg_quote($charlist, '#');
		$search = str_replace('-', '\-', $search);
		$search = str_replace('\.\.', '-', $search);
		return preg_replace('#^[' . $search . ']+|[' . $search . ']+$#Du', '', $string);
	}


	/**
	 * Converts the first character of the string to uppercase.
	 *
	 * @param  string $string  The string to process
	 * @return string  The processed string
	 */
	static public function ucfirst($string)
	{
		return self::upper(self::sub($string, 0, 1)) . self::sub($string, 1);
	}


	/**
	 * Converts the first character of every word to uppercase
	 *
	 * Words are considered to start at the beginning of the string, or after any
	 * whitespace character.
	 *
	 * @param  string $string  The string to process
	 * @return string  The processed string
	 */
	static public function ucwords($string)
	{
		return preg_replace_callback(
			'#(?<=^|\s|[\x{2000}-\x{200A}]|/|-|\(|\[|\{|\||"|^\'|\s\'|Ã¢â‚¬Ëœ|Ã¢â‚¬Å“)(.)#u',
			array('self', 'ucwordsCallback'),
			$string
		);
	}


	/**
	 * Handles converting a character to uppercase for ::ucwords()
	 *
	 * @param array $match  The regex match from ::ucwords()
	 * @return string  The uppercase character
	 */
	static private function ucwordsCallback($match)
	{
		return self::upper($match[1]);
	}


	/**
	 * Converts all lowercase characters to uppercase
	 *
	 * @param  string $string  The string to convert
	 * @return string  The input string with all lowercase characters in uppercase
	 */
	static public function upper($string)
	{
		// We get better performance falling back for ASCII strings
		if (!self::detect($string)) {
			return strtoupper($string);
		}

		if (self::$mbstring_available === NULL) {
			self::checkMbString();
		}

		if (self::$mbstring_available) {
			$string = mb_strtoupper($string, 'utf-8');
			// For some reason mb_strtoupper misses some character
			return strtr($string, self::$mb_lower_to_upper_fix);
		}

		return strtr($string, self::$lower_to_upper);
	}


	/**
	 * Wraps a string to a specific character width
	 *
	 * @param  string  $string  The string to wrap
	 * @param  integer $width	The character width to wrap to
	 * @param  string  $break   The string to insert as a break
	 * @param  boolean $cut     If words longer than the character width should be split to fit
	 * @return string  The input string with all lowercase characters in uppercase
	 */
	static public function wordwrap($string, $width=75, $break="\n", $cut=FALSE)
	{
		// We get better performance falling back for ASCII strings
		if (!self::detect($string)) {
			return wordwrap($string, $width, $break, $cut);
		}

		$words = preg_split('#(?<=\s|[\x{2000}-\x{200A}])#ue', $string);

		$output = '';

		$line_len = 0;
		foreach ($words as $word) {
			$word_len = self::len($word);

			// Shorten up words that are too long
			while ($cut && $word_len > $width) {
				$output  .= $break;
				$output  .= self::sub($word, 0, $width);
				$line_len = $width;
				$word	  = self::sub($word, $width);
				$word_len = self::len($word);
			}

			if ($line_len && $line_len + $word_len > $width) {
				$output  .= $break;
				$line_len = 0;
			}
			$output   .= $word;
			$line_len += $word_len;
		}

		return $output;
	}
}